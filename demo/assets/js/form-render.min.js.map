{"version":3,"sources":["form-render.min.js","kc-toggle.js","form-render.js"],"names":["$","Toggle","element","options","defaults","theme","labels","off","on","opts","extend","$kcToggle","insertAfter","append","toggleClass","is","kctOn","kctOff","kctHandle","kctInner","click","attr","this","fn","kcToggle","toggle","each","data","jQuery","_typeof","Symbol","iterator","obj","constructor","FormRender","formRender","destroyTemplate","container","dataType","formData","label","selectColor","noFormData","formRendered","render","notify","error","message","console","success","log","warning","warn","_helpers","getElement","id","makeId","document","getElementById","epoch","Date","getTime","tagName","value","markup","tag","content","arguments","length","undefined","attrs","contentType","field","createElement","getContentType","Array","isArray","appendContent","string","innerHTML","object","appendChild","array","i","hasOwnProperty","name","safeAttrName","setAttribute","call","fieldRender","fieldMarkup","fieldLabel","optionsMarkup","fieldAttrs","parseAttrs","attributes","fieldDesc","description","fieldRequired","fieldOptions","required","type","fieldLabelText","fieldLabelVal","fieldAttrsString","attrString","replace","index","el","optionAttrs","optionAttrsString","textContent","optionName","Object","assign","selected","checked","setTimeout","className","hyphenCase","str","$1","toLowerCase","safeAttr","push","join","window","JSON","stringify","attrNodes","Element","prototype","appendFormFields","fields","reverse","emptyContainer","lastChild","removeChild","rendered","parseXML","renderedFormWrap","querySelector","parentNode","insertBefore","nextSibling","style","display","output"],"mappings":"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","file":"form-render.min.js","sourcesContent":["'use strict';\n\n(function ($) {\n  'use strict';\n\n  var Toggle = function Toggle(element, options) {\n\n    var defaults = {\n      theme: 'fresh',\n      labels: {\n        off: 'Off',\n        on: 'On'\n      }\n    };\n\n    var opts = $.extend(defaults, options),\n        $kcToggle = $('<div class=\"kc-toggle\"/>').insertAfter(element).append(element);\n\n    $kcToggle.toggleClass('on', element.is(':checked'));\n\n    var kctOn = '<div class=\"kct-on\">' + opts.labels.on + '</div>',\n        kctOff = '<div class=\"kct-off\">' + opts.labels.off + '</div>',\n        kctHandle = '<div class=\"kct-handle\"></div>',\n        kctInner = '<div class=\"kct-inner\">' + kctOn + kctHandle + kctOff + '</div>';\n\n    $kcToggle.append(kctInner);\n\n    $kcToggle.click(function () {\n      element.attr('checked', !element.attr('checked'));\n      $(this).toggleClass('on');\n    });\n  };\n\n  $.fn.kcToggle = function (options) {\n    var toggle = this;\n    return toggle.each(function () {\n      var element = $(this);\n      if (element.data('kcToggle')) {\n        return;\n      }\n      var kcToggle = new Toggle(element, options);\n      element.data('kcToggle', kcToggle);\n    });\n  };\n})(jQuery);\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n// render the formBuilder XML into html\nvar FormRender = function FormRender(options, element) {\n  'use strict';\n\n  var formRender = this,\n      defaults = {\n    destroyTemplate: true, // @todo\n    container: false,\n    dataType: 'xml',\n    formData: false,\n    label: {\n      selectColor: 'Select Color',\n      noFormData: 'No form data.',\n      formRendered: 'Form Rendered'\n    },\n    render: true,\n    notify: {\n      error: function error(message) {\n        return console.error(message);\n      },\n      success: function success(message) {\n        return console.log(message);\n      },\n      warning: function warning(message) {\n        return console.warn(message);\n      }\n    }\n  },\n      _helpers = {};\n\n  var opts = $.extend(defaults, options);\n\n  /**\r\n   * Require the html element if it has been lost\r\n   *\r\n   * @return {object} javascript object for html element\r\n   */\n  _helpers.getElement = function () {\n    if (!element.id) {\n      element.id = _helpers.makeId(element);\n    }\n\n    return document.getElementById(element.id);\n  };\n\n  /**\r\n   * Make an ID for this element using current date and tag\r\n   *\r\n   * @param  {Boolean} element\r\n   * @return {String}          new id for element\r\n   */\n  _helpers.makeId = function (element) {\n    var epoch = new Date().getTime();\n\n    return element.tagName + '-' + epoch;\n  };\n\n  if (!opts.formData && element) {\n    element = _helpers.getElement();\n    opts.formData = element.value;\n  }\n\n  /**\r\n   * Generate markup wrapper where needed\r\n   *\r\n   * @param  {string} type\r\n   * @param  {object} attrs\r\n   * @param  {string} content we wrap this\r\n   * @return {string}\r\n   */\n  _helpers.markup = function (tag) {\n    var content = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];\n    var attrs = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n    var contentType = void 0,\n        field = document.createElement(tag),\n        getContentType = function getContentType(content) {\n      return Array.isArray(content) ? 'array' : typeof content === 'undefined' ? 'undefined' : _typeof(content);\n    },\n        appendContent = {\n      string: function string(content) {\n        field.innerHTML = content;\n      },\n      object: function object(content) {\n        return field.appendChild(content);\n      },\n      array: function array(content) {\n        for (var i = 0; i < content.length; i++) {\n          contentType = getContentType(content[i]);\n          appendContent[contentType](content[i]);\n        }\n      }\n    };\n\n    for (var attr in attrs) {\n      if (attrs.hasOwnProperty(attr)) {\n        var name = _helpers.safeAttrName(attr);\n        field.setAttribute(name, attrs[attr]);\n      }\n    }\n\n    contentType = getContentType(content);\n\n    if (content) {\n      appendContent[contentType].call(this, content);\n    }\n\n    return field;\n  };\n\n  /**\r\n   * Generate preview markup\r\n   * @param  {object} field\r\n   * @return {string}       preview markup for field\r\n   * @todo\r\n   */\n  _helpers.fieldRender = function (field) {\n    var fieldMarkup = '',\n        fieldLabel = '',\n        optionsMarkup = '';\n    var fieldAttrs = _helpers.parseAttrs(field.attributes),\n        fieldDesc = fieldAttrs.description || '',\n        fieldRequired = '',\n        fieldOptions = $('option', field);\n    fieldAttrs.id = fieldAttrs.name;\n\n    if (fieldAttrs.required) {\n      fieldAttrs.required = null;\n      fieldAttrs['aria-required'] = 'true';\n      fieldRequired = '<span class=\"required\">*</span>';\n    }\n\n    if (fieldAttrs.type !== 'hidden') {\n      if (fieldDesc) {\n        fieldDesc = '<span class=\"tooltip-element\" tooltip=\"' + fieldDesc + '\">?</span>';\n      }\n      var fieldLabelText = fieldAttrs.label || '';\n      fieldLabel = '<label for=\"' + fieldAttrs.id + '\">' + fieldLabelText + ' ' + fieldRequired + ' ' + fieldDesc + '</label>';\n    }\n\n    var fieldLabelVal = fieldAttrs.label;\n\n    delete fieldAttrs.label;\n    delete fieldAttrs.description;\n\n    var fieldAttrsString = _helpers.attrString(fieldAttrs);\n\n    switch (fieldAttrs.type) {\n      case 'textarea':\n      case 'rich-text':\n        delete fieldAttrs.type;\n        delete fieldAttrs.value;\n        fieldMarkup = fieldLabel + '<textarea ' + fieldAttrsString + '></textarea>';\n        break;\n      case 'select':\n        fieldAttrs.type = fieldAttrs.type.replace('-group', '');\n\n        if (fieldOptions.length) {\n          fieldOptions.each(function (index, el) {\n            index = index;\n            var optionAttrs = _helpers.parseAttrs(el.attributes),\n                optionAttrsString = _helpers.attrString(optionAttrs);\n            optionsMarkup += '<option ' + optionAttrsString + '>' + el.textContent + '</option>';\n          });\n        }\n        fieldMarkup = fieldLabel + '<select ' + fieldAttrsString + '>' + optionsMarkup + '</select>';\n        break;\n      case 'checkbox-group':\n      case 'radio-group':\n        fieldAttrs.type = fieldAttrs.type.replace('-group', '');\n\n        // delete fieldAttrs.className;\n\n        if (fieldOptions.length) {\n          (function () {\n            var optionName = fieldAttrs.type === 'checkbox' ? fieldAttrs.name + '[]' : fieldAttrs.name;\n            fieldOptions.each(function (index, el) {\n              var optionAttrs = Object.assign({}, fieldAttrs, _helpers.parseAttrs(el.attributes)),\n                  optionAttrsString = void 0;\n\n              if (optionAttrs.selected) {\n                delete optionAttrs.selected;\n                optionAttrs.checked = null;\n              }\n\n              optionAttrs.name = optionName;\n              optionAttrs.id = fieldAttrs.id + '-' + index;\n              optionAttrsString = _helpers.attrString(optionAttrs);\n              optionsMarkup += '<input ' + optionAttrsString + ' /> <label for=\"' + optionAttrs.id + '\">' + el.textContent + '</label><br>';\n            });\n          })();\n        }\n        fieldMarkup = fieldLabel + '<div class=\"' + fieldAttrs.type + '-group\">' + optionsMarkup + '</div>';\n        break;\n      case 'text':\n      case 'password':\n      case 'email':\n      case 'file':\n      case 'hidden':\n      case 'date':\n      case 'autocomplete':\n        fieldMarkup = fieldLabel + ' <input ' + fieldAttrsString + '>';\n        break;\n      case 'color':\n        fieldMarkup = fieldLabel + ' <input ' + fieldAttrsString + '> ' + opts.label.selectColor;\n        break;\n      case 'button':\n      case 'submit':\n        fieldMarkup = '<button ' + fieldAttrsString + '>' + fieldLabelVal + '</button>';\n        break;\n      case 'checkbox':\n        fieldMarkup = '<input ' + fieldAttrsString + '> ' + fieldLabel;\n\n        if (fieldAttrs.toggle) {\n          setTimeout(function () {\n            $(document.getElementById(fieldAttrs.id)).kcToggle();\n          }, 100);\n        }\n        break;\n      default:\n        fieldMarkup = '<' + fieldAttrs.type + '></' + fieldAttrs.type + '>';\n    }\n\n    if (fieldAttrs.type !== 'hidden') {\n      fieldMarkup = _helpers.markup('div', fieldMarkup, {\n        className: 'form-group field-' + fieldAttrs.id\n      });\n    } else {\n      fieldMarkup = _helpers.markup('input', null, fieldAttrs);\n    }\n\n    return fieldMarkup;\n  };\n\n  /**\r\n   * Convert camelCase into lowercase-hyphen\r\n   *\r\n   * @param  {string} str\r\n   * @return {string}\r\n   */\n  _helpers.hyphenCase = function (str) {\n    str = str.replace(/[^\\w\\s\\-]/gi, '');\n    str = str.replace(/([A-Z])/g, function ($1) {\n      return '-' + $1.toLowerCase();\n    });\n\n    return str.replace(/\\s/g, '-').replace(/^-+/g, '');\n  };\n\n  _helpers.attrString = function (attrs) {\n    var attributes = [];\n\n    for (var attr in attrs) {\n      if (attrs.hasOwnProperty(attr)) {\n        attr = _helpers.safeAttr(attr, attrs[attr]);\n        attributes.push(attr.name + attr.value);\n      }\n    }\n    return attributes.join(' ');\n  };\n\n  _helpers.safeAttr = function (name, value) {\n    var safeAttr = {\n      className: 'class'\n    };\n\n    name = safeAttr[name] || name;\n    value = value ? window.JSON.stringify(value) : false;\n    value = value ? '=' + value : '';\n\n    return {\n      name: name,\n      value: value\n    };\n  };\n\n  _helpers.safeAttrName = function (name) {\n    var safeAttr = {\n      className: 'class'\n    };\n\n    return safeAttr[name] || _helpers.hyphenCase(name);\n  };\n\n  _helpers.parseAttrs = function (attrNodes) {\n    var fieldAttrs = {};\n    for (var attr in attrNodes) {\n      if (attrNodes.hasOwnProperty(attr)) {\n        fieldAttrs[attrNodes[attr].name] = attrNodes[attr].value;\n      }\n    }\n    return fieldAttrs;\n  };\n\n  /**\r\n   * Extend Element prototype to allow us to append fields\r\n   *\r\n   * @param  {object} fields Node elements\r\n   */\n  Element.prototype.appendFormFields = function (fields) {\n    var element = this;\n    fields.reverse();\n    for (var i = fields.length - 1; i >= 0; i--) {\n      element.appendChild(fields[i]);\n    }\n  };\n\n  /**\r\n   * Extend Element prototype to remove content\r\n   */\n  Element.prototype.emptyContainer = function () {\n    var element = this;\n    while (element.lastChild) {\n      element.removeChild(element.lastChild);\n    }\n  };\n\n  // Begin the core plugin\n  var rendered = [];\n\n  var formData = $.parseXML(opts.formData),\n      fields = $('field', formData);\n  // @todo - form configuration settings (control position, creatorId, theme etc)\n  // settings = $('settings', formData);\n\n  if (!formData) {\n    opts.notify.error(opts.label.noFormData);\n    return false;\n  } else {\n    opts.notify.success(opts.label.formRendered);\n  }\n\n  // generate field markup if we have fields\n  if (fields.length) {\n    fields.each(function (index, field) {\n      index = index;\n      rendered.push(_helpers.fieldRender(field));\n    });\n  }\n\n  if (opts.render) {\n    if (opts.container) {\n      opts.container = opts.container instanceof jQuery ? opts.container[0] : opts.container;\n      opts.container.emptyContainer();\n      opts.container.appendFormFields(rendered);\n    } else if (element) {\n      var renderedFormWrap = document.querySelector('.rendered-form');\n      if (renderedFormWrap) {\n        renderedFormWrap.emptyContainer();\n        renderedFormWrap.appendFormFields(rendered);\n      } else {\n        renderedFormWrap = _helpers.markup('div', rendered, { className: 'rendered-form' });\n        element.parentNode.insertBefore(renderedFormWrap, element.nextSibling);\n        element.style.display = 'none';\n        element.setAttribute('disabled', 'disabled');\n      }\n    }\n  } else {\n    var output = rendered.join('');\n    formRender.markup = output;\n  }\n\n  return formRender;\n};\n\n(function ($) {\n  'use strict';\n\n  $.fn.formRender = function (options) {\n    this.each(function () {\n      var formRender = new FormRender(options, this);\n      return formRender;\n    });\n  };\n})(jQuery);","(function($) {\r\n  'use strict';\r\n\r\n  var Toggle = function(element, options) {\r\n\r\n    var defaults = {\r\n      theme: 'fresh',\r\n      labels: {\r\n        off: 'Off',\r\n        on: 'On'\r\n      }\r\n    };\r\n\r\n    var opts = $.extend(defaults, options),\r\n      $kcToggle = $('<div class=\"kc-toggle\"/>').insertAfter(element).append(element);\r\n\r\n    $kcToggle.toggleClass('on', element.is(':checked'));\r\n\r\n    var kctOn = `<div class=\"kct-on\">${opts.labels.on}</div>`,\r\n        kctOff = `<div class=\"kct-off\">${opts.labels.off}</div>`,\r\n        kctHandle = `<div class=\"kct-handle\"></div>`,\r\n        kctInner = `<div class=\"kct-inner\">${kctOn}${kctHandle}${kctOff}</div>`;\r\n\r\n    $kcToggle.append(kctInner);\r\n\r\n    $kcToggle.click(function() {\r\n      element.attr('checked', !element.attr('checked'));\r\n      $(this).toggleClass('on');\r\n    });\r\n\r\n  };\r\n\r\n  $.fn.kcToggle = function(options) {\r\n    var toggle = this;\r\n    return toggle.each(function() {\r\n      var element = $(this);\r\n      if (element.data('kcToggle')) {\r\n        return;\r\n      }\r\n      var kcToggle = new Toggle(element, options);\r\n      element.data('kcToggle', kcToggle);\r\n    });\r\n  };\r\n\r\n})(jQuery);\r\n","// render the formBuilder XML into html\r\nvar FormRender = function(options, element) {\r\n  'use strict';\r\n\r\n  var formRender = this,\r\n    defaults = {\r\n      destroyTemplate: true, // @todo\r\n      container: false,\r\n      dataType: 'xml',\r\n      formData: false,\r\n      label: {\r\n        selectColor: 'Select Color',\r\n        noFormData: 'No form data.',\r\n        formRendered: 'Form Rendered'\r\n      },\r\n      render: true,\r\n      notify: {\r\n        error: function(message) {\r\n          return console.error(message);\r\n        },\r\n        success: function(message) {\r\n          return console.log(message);\r\n        },\r\n        warning: function(message) {\r\n          return console.warn(message);\r\n        }\r\n      }\r\n    },\r\n    _helpers = {};\r\n\r\n  var opts = $.extend(defaults, options);\r\n\r\n\r\n  /**\r\n   * Require the html element if it has been lost\r\n   *\r\n   * @return {object} javascript object for html element\r\n   */\r\n  _helpers.getElement = function() {\r\n    if (!element.id) {\r\n      element.id = _helpers.makeId(element);\r\n    }\r\n\r\n    return document.getElementById(element.id);\r\n  };\r\n\r\n  /**\r\n   * Make an ID for this element using current date and tag\r\n   *\r\n   * @param  {Boolean} element\r\n   * @return {String}          new id for element\r\n   */\r\n  _helpers.makeId = function(element) {\r\n    let epoch = new Date().getTime();\r\n\r\n    return `${element.tagName}-${epoch}`;\r\n  };\r\n\r\n  if (!opts.formData && element) {\r\n    element = _helpers.getElement();\r\n    opts.formData = element.value;\r\n  }\r\n\r\n  /**\r\n   * Generate markup wrapper where needed\r\n   *\r\n   * @param  {string} type\r\n   * @param  {object} attrs\r\n   * @param  {string} content we wrap this\r\n   * @return {string}\r\n   */\r\n  _helpers.markup = function(tag, content = '', attrs = {}) {\r\n    let contentType,\r\n      field = document.createElement(tag),\r\n      getContentType = function(content) {\r\n        return Array.isArray(content) ? 'array' : typeof content;\r\n      },\r\n      appendContent = {\r\n        string: function(content) {\r\n          field.innerHTML = content;\r\n        },\r\n        object: function(content) {\r\n          return field.appendChild(content);\r\n        },\r\n        array: function(content) {\r\n          for (var i = 0; i < content.length; i++) {\r\n            contentType = getContentType(content[i]);\r\n            appendContent[contentType](content[i]);\r\n          }\r\n        }\r\n      };\r\n\r\n    for (var attr in attrs) {\r\n      if (attrs.hasOwnProperty(attr)) {\r\n        let name = _helpers.safeAttrName(attr);\r\n        field.setAttribute(name, attrs[attr]);\r\n      }\r\n    }\r\n\r\n    contentType = getContentType(content);\r\n\r\n    if (content) {\r\n      appendContent[contentType].call(this, content);\r\n    }\r\n\r\n    return field;\r\n  };\r\n\r\n  /**\r\n   * Generate preview markup\r\n   * @param  {object} field\r\n   * @return {string}       preview markup for field\r\n   * @todo\r\n   */\r\n  _helpers.fieldRender = function(field) {\r\n    var fieldMarkup = '',\r\n      fieldLabel = '',\r\n      optionsMarkup = '';\r\n    var fieldAttrs = _helpers.parseAttrs(field.attributes),\r\n      fieldDesc = fieldAttrs.description || '',\r\n      fieldRequired = '',\r\n      fieldOptions = $('option', field);\r\n    fieldAttrs.id = fieldAttrs.name;\r\n\r\n    if (fieldAttrs.required) {\r\n      fieldAttrs.required = null;\r\n      fieldAttrs['aria-required'] = 'true';\r\n      fieldRequired = `<span class=\"required\">*</span>`;\r\n    }\r\n\r\n    if (fieldAttrs.type !== 'hidden') {\r\n      if (fieldDesc) {\r\n        fieldDesc = `<span class=\"tooltip-element\" tooltip=\"${fieldDesc}\">?</span>`;\r\n      }\r\n      let fieldLabelText = fieldAttrs.label || '';\r\n      fieldLabel = `<label for=\"${fieldAttrs.id}\">${fieldLabelText} ${fieldRequired} ${fieldDesc}</label>`;\r\n    }\r\n\r\n    var fieldLabelVal = fieldAttrs.label;\r\n\r\n    delete fieldAttrs.label;\r\n    delete fieldAttrs.description;\r\n\r\n    var fieldAttrsString = _helpers.attrString(fieldAttrs);\r\n\r\n    switch (fieldAttrs.type) {\r\n      case 'textarea':\r\n      case 'rich-text':\r\n        delete fieldAttrs.type;\r\n        delete fieldAttrs.value;\r\n        fieldMarkup = `${fieldLabel}<textarea ${fieldAttrsString}></textarea>`;\r\n        break;\r\n      case 'select':\r\n        fieldAttrs.type = fieldAttrs.type.replace('-group', '');\r\n\r\n        if (fieldOptions.length) {\r\n          fieldOptions.each(function(index, el) {\r\n            index = index;\r\n            let optionAttrs = _helpers.parseAttrs(el.attributes),\r\n              optionAttrsString = _helpers.attrString(optionAttrs);\r\n            optionsMarkup += `<option ${optionAttrsString}>${el.textContent}</option>`;\r\n          });\r\n        }\r\n        fieldMarkup = `${fieldLabel}<select ${fieldAttrsString}>${optionsMarkup}</select>`;\r\n        break;\r\n      case 'checkbox-group':\r\n      case 'radio-group':\r\n        fieldAttrs.type = fieldAttrs.type.replace('-group', '');\r\n\r\n        // delete fieldAttrs.className;\r\n\r\n        if (fieldOptions.length) {\r\n          let optionName = fieldAttrs.type === 'checkbox' ? fieldAttrs.name + '[]' : fieldAttrs.name;\r\n          fieldOptions.each(function(index, el) {\r\n            let optionAttrs = Object.assign({}, fieldAttrs, _helpers.parseAttrs(el.attributes)),\r\n              optionAttrsString;\r\n\r\n            if (optionAttrs.selected) {\r\n              delete optionAttrs.selected;\r\n              optionAttrs.checked = null;\r\n            }\r\n\r\n            optionAttrs.name = optionName;\r\n            optionAttrs.id = fieldAttrs.id + '-' + index;\r\n            optionAttrsString = _helpers.attrString(optionAttrs);\r\n            optionsMarkup += `<input ${optionAttrsString} /> <label for=\"${optionAttrs.id}\">${el.textContent}</label><br>`;\r\n          });\r\n        }\r\n        fieldMarkup = `${fieldLabel}<div class=\"${fieldAttrs.type}-group\">${optionsMarkup}</div>`;\r\n        break;\r\n      case 'text':\r\n      case 'password':\r\n      case 'email':\r\n      case 'file':\r\n      case 'hidden':\r\n      case 'date':\r\n      case 'autocomplete':\r\n        fieldMarkup = `${fieldLabel} <input ${fieldAttrsString}>`;\r\n        break;\r\n      case 'color':\r\n        fieldMarkup = `${fieldLabel} <input ${fieldAttrsString}> ${opts.label.selectColor}`;\r\n        break;\r\n      case 'button':\r\n      case 'submit':\r\n        fieldMarkup = `<button ${fieldAttrsString}>${fieldLabelVal}</button>`;\r\n        break;\r\n      case 'checkbox':\r\n        fieldMarkup = `<input ${fieldAttrsString}> ${fieldLabel}`;\r\n\r\n        if (fieldAttrs.toggle) {\r\n          setTimeout(function() {\r\n            $(document.getElementById(fieldAttrs.id)).kcToggle();\r\n          }, 100);\r\n        }\r\n        break;\r\n      default:\r\n        fieldMarkup = `<${fieldAttrs.type}></${fieldAttrs.type}>`;\r\n    }\r\n\r\n    if (fieldAttrs.type !== 'hidden') {\r\n      fieldMarkup = _helpers.markup('div', fieldMarkup, {\r\n        className: 'form-group field-' + fieldAttrs.id\r\n      });\r\n    } else {\r\n      fieldMarkup = _helpers.markup('input', null, fieldAttrs);\r\n    }\r\n\r\n    return fieldMarkup;\r\n  };\r\n\r\n  /**\r\n   * Convert camelCase into lowercase-hyphen\r\n   *\r\n   * @param  {string} str\r\n   * @return {string}\r\n   */\r\n  _helpers.hyphenCase = (str) => {\r\n    str = str.replace(/[^\\w\\s\\-]/gi, '');\r\n    str = str.replace(/([A-Z])/g, function($1) {\r\n      return '-' + $1.toLowerCase();\r\n    });\r\n\r\n    return str.replace(/\\s/g, '-').replace(/^-+/g, '');\r\n  };\r\n\r\n  _helpers.attrString = function(attrs) {\r\n    let attributes = [];\r\n\r\n    for (var attr in attrs) {\r\n      if (attrs.hasOwnProperty(attr)) {\r\n        attr = _helpers.safeAttr(attr, attrs[attr]);\r\n        attributes.push(attr.name + attr.value);\r\n      }\r\n    }\r\n    return attributes.join(' ');\r\n  };\r\n\r\n  _helpers.safeAttr = function(name, value) {\r\n    let safeAttr = {\r\n      className: 'class'\r\n    };\r\n\r\n    name = safeAttr[name] || name;\r\n    value = value ? window.JSON.stringify(value) : false;\r\n    value = value ? `=${value}` : '';\r\n\r\n    return {\r\n      name,\r\n      value\r\n    };\r\n  };\r\n\r\n  _helpers.safeAttrName = function(name) {\r\n    let safeAttr = {\r\n      className: 'class'\r\n    };\r\n\r\n    return safeAttr[name] || _helpers.hyphenCase(name);\r\n  };\r\n\r\n  _helpers.parseAttrs = function(attrNodes) {\r\n    var fieldAttrs = {};\r\n    for (var attr in attrNodes) {\r\n      if (attrNodes.hasOwnProperty(attr)) {\r\n        fieldAttrs[attrNodes[attr].name] = attrNodes[attr].value;\r\n      }\r\n    }\r\n    return fieldAttrs;\r\n  };\r\n\r\n  /**\r\n   * Extend Element prototype to allow us to append fields\r\n   *\r\n   * @param  {object} fields Node elements\r\n   */\r\n  Element.prototype.appendFormFields = function(fields) {\r\n    var element = this;\r\n    fields.reverse();\r\n    for (var i = fields.length - 1; i >= 0; i--) {\r\n      element.appendChild(fields[i]);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Extend Element prototype to remove content\r\n   */\r\n  Element.prototype.emptyContainer = function() {\r\n    var element = this;\r\n    while (element.lastChild) {\r\n      element.removeChild(element.lastChild);\r\n    }\r\n  };\r\n\r\n  // Begin the core plugin\r\n  var rendered = [];\r\n\r\n  var formData = $.parseXML(opts.formData),\r\n    fields = $('field', formData);\r\n  // @todo - form configuration settings (control position, creatorId, theme etc)\r\n  // settings = $('settings', formData);\r\n\r\n  if (!formData) {\r\n    opts.notify.error(opts.label.noFormData);\r\n    return false;\r\n  } else {\r\n    opts.notify.success(opts.label.formRendered);\r\n  }\r\n\r\n  // generate field markup if we have fields\r\n  if (fields.length) {\r\n    fields.each(function(index, field) {\r\n      index = index;\r\n      rendered.push(_helpers.fieldRender(field));\r\n    });\r\n  }\r\n\r\n  if (opts.render) {\r\n    if (opts.container) {\r\n      opts.container = (opts.container instanceof jQuery) ? opts.container[0] : opts.container;\r\n      opts.container.emptyContainer();\r\n      opts.container.appendFormFields(rendered);\r\n    } else if (element) {\r\n      let renderedFormWrap = document.querySelector('.rendered-form');\r\n      if (renderedFormWrap) {\r\n        renderedFormWrap.emptyContainer();\r\n        renderedFormWrap.appendFormFields(rendered);\r\n      } else {\r\n        renderedFormWrap = _helpers.markup('div', rendered, { className: 'rendered-form' });\r\n        element.parentNode.insertBefore(renderedFormWrap, element.nextSibling);\r\n        element.style.display = 'none';\r\n        element.setAttribute('disabled', 'disabled');\r\n      }\r\n    }\r\n  } else {\r\n    var output = rendered.join('');\r\n    formRender.markup = output;\r\n  }\r\n\r\n  return formRender;\r\n\r\n};\r\n\r\n(function($) {\r\n  'use strict';\r\n\r\n  $.fn.formRender = function(options) {\r\n    this.each(function() {\r\n      let formRender = new FormRender(options, this);\r\n      return formRender;\r\n    });\r\n  };\r\n\r\n})(jQuery);\r\n"],"sourceRoot":"/source/"}