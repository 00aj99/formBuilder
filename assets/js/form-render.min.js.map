{"version":3,"sources":["form-render.min.js","kc-toggle.js","form-render.js"],"names":["$","Toggle","element","options","defaults","theme","labels","off","on","opts","extend","$kcToggle","insertAfter","append","toggleClass","is","kctOn","kctOff","kctHandle","kctInner","click","attr","this","fn","kcToggle","toggle","each","data","jQuery","FormRender","formRender","destroyTemplate","container","dataType","formData","label","selectColor","noFormData","formRendered","render","notify","error","message","console","success","log","warning","warn","_helpers","getElement","id","makeId","onchange","messages","formUpdated","arguments","length","undefined","epoch","Date","getTime","tagName","value","markup","type","attrs","content","attrString","Array","isArray","join","inlineElems","template","indexOf","fieldRender","field","fieldMarkup","fieldLabel","optionsMarkup","fieldAttrs","parseAttrs","attributes","fieldDesc","description","fieldRequired","fieldOptions","name","required","fieldLabelVal","fieldAttrsString","replace","index","el","optionAttrs","optionAttrsString","optionText","innerHTML","innerContent","innerText","childNodes","nodeValue","className","optionName","selected","checked","setTimeout","document","getElementById","hasOwnProperty","safeAttr","push","window","JSON","stringify","attrNodes","nodeName","rendered","parseXML","fields","output","html","replaceWith"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,AALA,cCAA,SAAUA,GAGR,GAAIC,GAAS,SAASC,EAASC,GAE7B,GAAIC,IACFC,MAAO,QACPC,QACEC,IAAK,MACLC,GAAI,OAIJC,EAAOT,EAAEU,OAAON,EAAUD,GAC5BQ,EAAYX,EAAE,4BAA4BY,YAAYV,GAASW,OAAOX,EAExES,GAAUG,YAAY,KAAMZ,EAAQa,GAAG,YAEvC,IAAIC,GAAK,uBAA0BP,EAAKH,OAAOE,GAAE,SAC7CS,EAAM,wBAA2BR,EAAKH,OAAOC,IAAG,SAChDW,EAAS,iCACTC,EAAQ,0BAA6BH,EAAQE,EAAYD,EAAM,QAEnEN,GAAUE,OAAOM,GAEjBR,EAAUS,MAAM,WACdlB,EAAQmB,KAAK,WAAYnB,EAAQmB,KAAK,YACtCrB,EAAEsB,MAAMR,YAAY,QAKxBd,GAAEuB,GAAGC,SAAW,SAASrB,GACvB,GAAIsB,GAASH,IACb,OAAOG,GAAOC,KAAK,WACjB,GAAIxB,GAAUF,EAAEsB,KAChB,KAAIpB,EAAQyB,KAAK,YAAjB,CAGA,GAAIH,GAAW,GAAIvB,GAAOC,EAASC,EACnCD,GAAQyB,KAAK,WAAYH,QAI5BI,OC3CH,IAAIC,YAAa,SAAS1B,EAASD,GAGjC,GAAI4B,GAAaR,KACflB,GACE2B,iBAAiB,EACjBC,WAAW,EACXC,SAAU,MACVC,UAAU,EACVC,OACEC,YAAa,eACbC,WAAY,gBACZC,aAAc,iBAEhBC,QAAQ,EACRC,QACEC,MAAO,SAASC,GACd,MAAOC,SAAQF,MAAMC,IAEvBE,QAAS,SAASF,GAChB,MAAOC,SAAQE,IAAIH,IAErBI,QAAS,SAASJ,GAChB,MAAOC,SAAQI,KAAKL,MAI1BM,KAEEvC,EAAOT,EAAEU,OAAON,EAAUD,EAG9B6C,GAASC,WAAa,WAWpB,MAVK/C,GAAQgD,KACXhD,EAAQgD,GAAKF,EAASG,OAAOjD,IAG1BA,EAAQkD,WACXlD,EAAQkD,SAAW,WACjB3C,EAAK+B,OAAOI,QAAQnC,EAAK4C,SAASC,eAI/BpD,GAGT8C,EAASG,OAAS,WF+ChB,GE/CyBjD,GAAOqD,UAAAC,QAAA,GAAAC,SAAAF,UAAA,IAAG,EAAKA,UAAA,GACpCG,GAAQ,GAAIC,OAAOC,SAEvB,OAAU1D,GAAQ2D,QAAO,IAAIH,IAG1BjD,EAAKyB,UAAYhC,IACpBA,EAAU8C,EAASC,aACnBxC,EAAKyB,SAAWhC,EAAQ4D,OAW1Bd,EAASe,OAAS,SAASC,GFiDzB,GEjD+BC,GAAKV,UAAAC,QAAA,GAAAC,SAAAF,UAAA,MAAKA,UAAA,GAAEW,EAAOX,UAAAC,QAAA,GAAAC,SAAAF,UAAA,GAAG,GAAEA,UAAA,EACvDU,GAAQjB,EAASmB,WAAWF,GAC5BC,EAAUE,MAAMC,QAAQH,GAAWA,EAAQI,KAAK,IAAMJ,CACtD,IAAIK,IAAe,SACjBC,EAAyC,KAA9BD,EAAYE,QAAQT,GAAY,IAAOA,EAAI,IAAIC,EAAK,IAAIC,EAAO,KAAKF,EAAI,IAAA,IAAUA,EAAI,IAAIC,EAAK,IAC5G,OAAOO,IASTxB,EAAS0B,YAAc,SAASC,GAC9B,GAAIC,GAAc,GAChBC,EAAa,GACbC,EAAgB,GACdC,EAAa/B,EAASgC,WAAWL,EAAMM,YACzCC,EAAYH,EAAWI,aAAe,GACtCC,EAAgB,GAChBC,EAAerF,EAAE,SAAU2E,EAC7BI,GAAW7B,GAAK6B,EAAWO,KAEvBP,EAAWQ,WACbR,EAAWQ,SAAW,KACtBR,EAAW,iBAAmB,OAC9BK,EAAa,mCAGS,WAApBL,EAAWf,OACTkB,IACFA,EAAS,0CAA6CA,EAAS,cAEjEL,EAAU,eAAkBE,EAAW7B,GAAE,KAAK6B,EAAW5C,MAAK,IAAIiD,EAAa,IAAIF,EAAS,WAG9F,IAAIM,GAAgBT,EAAW5C,YAExB4C,GAAW5C,YACX4C,GAAWI,WAElB,IAAIM,GAAmBzC,EAASmB,WAAWY,EAE3C,QAAQA,EAAWf,MACjB,IAAK,WACL,IAAK,kBACIe,GAAWf,WACXe,GAAWjB,MAClBc,EAAiBC,EAAU,aAAaY,EAAgB,cACxD,MAAM,KACH,SACHV,EAAWf,KAAOe,EAAWf,KAAK0B,QAAQ,SAAU,IAEhDL,EAAa7B,QACf6B,EAAa3D,KAAK,SAASiE,EAAOC,GAChCD,EAAQA,CACR,IAAIE,GAAc7C,EAASgC,WAAWY,EAAGX,YACvCa,EAAoB9C,EAASmB,WAAW0B,GACxCE,EAAaH,EAAGI,WAAaJ,EAAGK,cAAgBL,EAAGM,WAAaN,EAAGO,WAAW,GAAGC,WAAaR,EAAG9B,KACnGgB,IAAa,WAAegB,EAAiB,IAAIC,EAAU,cAG/DnB,EAAiBC,EAAU,WAAWY,EAAgB,IAAIX,EAAa,WACvE,MAAM,KACH,iBACL,IAAK,cACHC,EAAWf,KAAOe,EAAWf,KAAK0B,QAAQ,SAAU,UAE7CX,GAAWsB,UAEdhB,EAAa7B,SFoDf,WEnDA,GAAI8C,GAAiC,aAApBvB,EAAWf,KAAsBe,EAAWO,KAAO,KAAOP,EAAWO,IACtFD,GAAa3D,KAAK,SAASiE,EAAOC,GAChC,GAAIC,GAAc7F,EAAEU,UAAWqE,EAAY/B,EAASgC,WAAWY,EAAGX,aAChEa,EAAiBrC,OACjBsC,EAAUtC,MAERoC,GAAYU,iBACPV,GAAYU,SACnBV,EAAYW,QAAU,MAGxBX,EAAYP,KAAOgB,EACnBT,EAAY3C,GAAK6B,EAAW7B,GAAK,IAAMyC,EACvCG,EAAoB9C,EAASmB,WAAW0B,GACxCE,EAAaH,EAAGI,WAAaJ,EAAGK,cAAgBL,EAAGM,WAAaN,EAAG9B,OAAS,GAE5EgB,GAAa,UAAcgB,EAAiB,mBAAmBD,EAAY3C,GAAE,KAAK6C,EAAU,oBAGhGnB,EAAiBC,EAAU,eAAeE,EAAWf,KAAI,WAAWc,EAAa,QACjF,MAAM,KACH,OACL,IAAK,WACL,IAAK,QACL,IAAK,OACL,IAAK,SACL,IAAK,OACL,IAAK,eACHF,EAAiBC,EAAU,WAAWY,EAAgB,GACtD,MAAM,KACH,QACHb,EAAiBC,EAAU,WAAWY,EAAgB,KAAKhF,EAAK0B,MAAMC,WACtE,MAAM,KACH,SACL,IAAK,SACHwC,EAAW,WAAca,EAAgB,IAAID,EAAa,WAC1D,MAAM,KACH,WACHZ,EAAW,UAAaa,EAAgB,KAAKZ,EAEzCE,EAAWtD,QACbgF,WAAW,WACTzG,EAAE0G,SAASC,eAAe5B,EAAW7B,KAAK1B,YACzC,IAEL,MAAM,SAENoD,EAAW,IAAOG,EAAWf,KAAI,MAAMe,EAAWf,KAAI,IAS1D,MANwB,WAApBe,EAAWf,OACbY,EAAc5B,EAASe,OAAO,OAC5BsC,UAAW,oBAAsBtB,EAAW7B,IAC3C0B,IAGEA,GAGT5B,EAASmB,WAAa,SAASF,GAC7B,GAAIgB,KAEJ,KAAK,GAAI5D,KAAQ4C,GACXA,EAAM2C,eAAevF,KACvBA,EAAO2B,EAAS6D,SAASxF,EAAM4C,EAAM5C,IACrC4D,EAAW6B,KAAKzF,EAAKiE,KAAOjE,EAAKyC,OAGrC,OAAOmB,GAAWX,KAAK,MAGzBtB,EAAS6D,SAAW,SAASvB,EAAMxB,GACjC,GAAI+C,IACFR,UAAW,QAOb,OAJAf,GAAOuB,EAASvB,IAASA,EACzBxB,EAAQA,EAAQiD,OAAOC,KAAKC,UAAUnD,IAAS,EAC/CA,EAAQA,EAAK,IAAOA,EAAU,IAG5BwB,KAAAA,EACAxB,MAAAA,IAIJd,EAASgC,WAAa,SAASkC,GAC7B,GAAInC,KACJ,KAAK,GAAI1D,KAAQ6F,GACXA,EAAUN,eAAevF,KAC3B0D,EAAWmC,EAAU7F,GAAM8F,UAAYD,EAAU7F,GAAM+E,UAG3D,OAAOrB,GAIT,IAAIqC,MAEAlF,EAAWlC,EAAEqH,SAAS5G,EAAKyB,UAC7BoF,EAAStH,EAAE,QAASkC,EAItB,KAAKA,EAEH,MADAzB,GAAK+B,OAAOC,MAAMhC,EAAK0B,MAAME,aACtB,CAEP5B,GAAK+B,OAAOI,QAAQnC,EAAK0B,MAAMG,cAI7BgF,EAAO9D,QACT8D,EAAO5F,KAAK,SAASiE,EAAOhB,GAC1BgB,EAAQA,EACRyB,EAASN,KAAK9D,EAAS0B,YAAYC,KAIvC,IAAI4C,GAASH,EAAS9C,KAAK,GAY3B,OAVI7D,GAAK8B,OACH9B,EAAKuB,WAAavB,EAAKuB,UAAUwB,OACnC/C,EAAKuB,UAAUwF,KAAKD,GACXrH,GACTA,EAAQuH,YAAYF,GAGtBzF,EAAWiC,OAASwD,EAGfzF,IAIT,SAAU9B,GAGRA,EAAEuB,GAAGO,WAAa,SAAS3B,GACzBmB,KAAKI,KAAK,WACR,GAAIxB,GAAUoB,KACZQ,EAAa,GAAID,YAAW1B,EAASD,EACvCF,GAAEE,GAASyB,KAAK,aAAcG,OAIjCF","file":"form-render.min.js","sourcesContent":["'use strict';\n\n(function ($) {\n  'use strict';\n\n  var Toggle = function Toggle(element, options) {\n\n    var defaults = {\n      theme: 'fresh',\n      labels: {\n        off: 'Off',\n        on: 'On'\n      }\n    };\n\n    var opts = $.extend(defaults, options),\n        $kcToggle = $('<div class=\"kc-toggle\"/>').insertAfter(element).append(element);\n\n    $kcToggle.toggleClass('on', element.is(':checked'));\n\n    var kctOn = '<div class=\"kct-on\">' + opts.labels.on + '</div>',\n        kctOff = '<div class=\"kct-off\">' + opts.labels.off + '</div>',\n        kctHandle = '<div class=\"kct-handle\"></div>',\n        kctInner = '<div class=\"kct-inner\">' + kctOn + kctHandle + kctOff + '</div>';\n\n    $kcToggle.append(kctInner);\n\n    $kcToggle.click(function () {\n      element.attr('checked', !element.attr('checked'));\n      $(this).toggleClass('on');\n    });\n  };\n\n  $.fn.kcToggle = function (options) {\n    var toggle = this;\n    return toggle.each(function () {\n      var element = $(this);\n      if (element.data('kcToggle')) {\n        return;\n      }\n      var kcToggle = new Toggle(element, options);\n      element.data('kcToggle', kcToggle);\n    });\n  };\n})(jQuery);\n// render the formBuilder XML into html\n'use strict';\n\nvar FormRender = function FormRender(options, element) {\n  'use strict';\n\n  var formRender = this,\n      defaults = {\n    destroyTemplate: true, // @todo\n    container: false,\n    dataType: 'xml',\n    formData: false,\n    label: {\n      selectColor: 'Select Color',\n      noFormData: 'No form data.',\n      formRendered: 'Form Rendered'\n    },\n    render: true,\n    notify: {\n      error: function error(message) {\n        return console.error(message);\n      },\n      success: function success(message) {\n        return console.log(message);\n      },\n      warning: function warning(message) {\n        return console.warn(message);\n      }\n    }\n  },\n      _helpers = {};\n\n  var opts = $.extend(defaults, options);\n\n  _helpers.getElement = function () {\n    if (!element.id) {\n      element.id = _helpers.makeId(element);\n    }\n\n    if (!element.onchange) {\n      element.onchange = function () {\n        opts.notify.success(opts.messages.formUpdated);\n      };\n    }\n\n    return element;\n  };\n\n  _helpers.makeId = function () {\n    var element = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];\n\n    var epoch = new Date().getTime();\n\n    return element.tagName + '-' + epoch;\n  };\n\n  if (!opts.formData && element) {\n    element = _helpers.getElement();\n    opts.formData = element.value;\n  }\n\n  /**\n   * Generate markup wrapper where needed\n   *\n   * @param  {string} type\n   * @param  {object} attrs\n   * @param  {string} content we wrap this\n   * @return {string}\n   */\n  _helpers.markup = function (type) {\n    var attrs = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n    var content = arguments.length <= 2 || arguments[2] === undefined ? '' : arguments[2];\n\n    attrs = _helpers.attrString(attrs);\n    content = Array.isArray(content) ? content.join('') : content;\n    var inlineElems = ['input'],\n        template = inlineElems.indexOf(type) === -1 ? '<' + type + ' ' + attrs + '>' + content + '</' + type + '>' : '<' + type + ' ' + attrs + '/>';\n    return template;\n  };\n\n  /**\n   * Generate preview markup\n   * @param  {object} field\n   * @return {string}       preview markup for field\n   * @todo\n   */\n  _helpers.fieldRender = function (field) {\n    var fieldMarkup = '',\n        fieldLabel = '',\n        optionsMarkup = '';\n    var fieldAttrs = _helpers.parseAttrs(field.attributes),\n        fieldDesc = fieldAttrs.description || '',\n        fieldRequired = '',\n        fieldOptions = $('option', field);\n    fieldAttrs.id = fieldAttrs.name;\n\n    if (fieldAttrs.required) {\n      fieldAttrs.required = null;\n      fieldAttrs['aria-required'] = 'true';\n      fieldRequired = '<span class=\"required\">*</span>';\n    }\n\n    if (fieldAttrs.type !== 'hidden') {\n      if (fieldDesc) {\n        fieldDesc = '<span class=\"tooltip-element\" tooltip=\"' + fieldDesc + '\">?</span>';\n      }\n      fieldLabel = '<label for=\"' + fieldAttrs.id + '\">' + fieldAttrs.label + ' ' + fieldRequired + ' ' + fieldDesc + '</label>';\n    }\n\n    var fieldLabelVal = fieldAttrs.label;\n\n    delete fieldAttrs.label;\n    delete fieldAttrs.description;\n\n    var fieldAttrsString = _helpers.attrString(fieldAttrs);\n\n    switch (fieldAttrs.type) {\n      case 'textarea':\n      case 'rich-text':\n        delete fieldAttrs.type;\n        delete fieldAttrs.value;\n        fieldMarkup = fieldLabel + '<textarea ' + fieldAttrsString + '></textarea>';\n        break;\n      case 'select':\n        fieldAttrs.type = fieldAttrs.type.replace('-group', '');\n\n        if (fieldOptions.length) {\n          fieldOptions.each(function (index, el) {\n            index = index;\n            var optionAttrs = _helpers.parseAttrs(el.attributes),\n                optionAttrsString = _helpers.attrString(optionAttrs),\n                optionText = el.innerHTML || el.innerContent || el.innerText || el.childNodes[0].nodeValue || el.value;\n            optionsMarkup += '<option ' + optionAttrsString + '>' + optionText + '</option>';\n          });\n        }\n        fieldMarkup = fieldLabel + '<select ' + fieldAttrsString + '>' + optionsMarkup + '</select>';\n        break;\n      case 'checkbox-group':\n      case 'radio-group':\n        fieldAttrs.type = fieldAttrs.type.replace('-group', '');\n\n        delete fieldAttrs.className;\n\n        if (fieldOptions.length) {\n          (function () {\n            var optionName = fieldAttrs.type === 'checkbox' ? fieldAttrs.name + '[]' : fieldAttrs.name;\n            fieldOptions.each(function (index, el) {\n              var optionAttrs = $.extend({}, fieldAttrs, _helpers.parseAttrs(el.attributes)),\n                  optionAttrsString = undefined,\n                  optionText = undefined;\n\n              if (optionAttrs.selected) {\n                delete optionAttrs.selected;\n                optionAttrs.checked = null;\n              }\n\n              optionAttrs.name = optionName;\n              optionAttrs.id = fieldAttrs.id + '-' + index;\n              optionAttrsString = _helpers.attrString(optionAttrs);\n              optionText = el.innerHTML || el.innerContent || el.innerText || el.value || '';\n\n              optionsMarkup += '<input ' + optionAttrsString + ' /> <label for=\"' + optionAttrs.id + '\">' + optionText + '</label><br>';\n            });\n          })();\n        }\n        fieldMarkup = fieldLabel + '<div class=\"' + fieldAttrs.type + '-group\">' + optionsMarkup + '</div>';\n        break;\n      case 'text':\n      case 'password':\n      case 'email':\n      case 'file':\n      case 'hidden':\n      case 'date':\n      case 'autocomplete':\n        fieldMarkup = fieldLabel + ' <input ' + fieldAttrsString + '>';\n        break;\n      case 'color':\n        fieldMarkup = fieldLabel + ' <input ' + fieldAttrsString + '> ' + opts.label.selectColor;\n        break;\n      case 'button':\n      case 'submit':\n        fieldMarkup = '<button ' + fieldAttrsString + '>' + fieldLabelVal + '</button>';\n        break;\n      case 'checkbox':\n        fieldMarkup = '<input ' + fieldAttrsString + '> ' + fieldLabel;\n\n        if (fieldAttrs.toggle) {\n          setTimeout(function () {\n            $(document.getElementById(fieldAttrs.id)).kcToggle();\n          }, 100);\n        }\n        break;\n      default:\n        fieldMarkup = '<' + fieldAttrs.type + '></' + fieldAttrs.type + '>';\n    }\n\n    if (fieldAttrs.type !== 'hidden') {\n      fieldMarkup = _helpers.markup('div', {\n        className: 'form-group field-' + fieldAttrs.id\n      }, fieldMarkup);\n    }\n\n    return fieldMarkup;\n  };\n\n  _helpers.attrString = function (attrs) {\n    var attributes = [];\n\n    for (var attr in attrs) {\n      if (attrs.hasOwnProperty(attr)) {\n        attr = _helpers.safeAttr(attr, attrs[attr]);\n        attributes.push(attr.name + attr.value);\n      }\n    }\n    return attributes.join(' ');\n  };\n\n  _helpers.safeAttr = function (name, value) {\n    var safeAttr = {\n      className: 'class'\n    };\n\n    name = safeAttr[name] || name;\n    value = value ? window.JSON.stringify(value) : false;\n    value = value ? '=' + value : '';\n\n    return {\n      name: name,\n      value: value\n    };\n  };\n\n  _helpers.parseAttrs = function (attrNodes) {\n    var fieldAttrs = {};\n    for (var attr in attrNodes) {\n      if (attrNodes.hasOwnProperty(attr)) {\n        fieldAttrs[attrNodes[attr].nodeName] = attrNodes[attr].nodeValue;\n      }\n    }\n    return fieldAttrs;\n  };\n\n  // Begin the core plugin\n  var rendered = [];\n\n  var formData = $.parseXML(opts.formData),\n      fields = $('field', formData);\n  // @todo - form configuration settings (control position, creatorId, theme etc)\n  // settings = $('settings', formData);\n\n  if (!formData) {\n    opts.notify.error(opts.label.noFormData);\n    return false;\n  } else {\n    opts.notify.success(opts.label.formRendered);\n  }\n\n  // generate field markup if we have fields\n  if (fields.length) {\n    fields.each(function (index, field) {\n      index = index;\n      rendered.push(_helpers.fieldRender(field));\n    });\n  }\n\n  var output = rendered.join('');\n\n  if (opts.render) {\n    if (opts.container && opts.container.length) {\n      opts.container.html(output);\n    } else if (element) {\n      element.replaceWith(output);\n    }\n  } else {\n    formRender.markup = output;\n  }\n\n  return formRender;\n};\n\n(function ($) {\n  'use strict';\n\n  $.fn.formRender = function (options) {\n    this.each(function () {\n      var element = this,\n          formRender = new FormRender(options, element);\n      $(element).data('formRender', formRender);\n    });\n  };\n})(jQuery);","(function($) {\n  'use strict';\n\n  var Toggle = function(element, options) {\n\n    var defaults = {\n      theme: 'fresh',\n      labels: {\n        off: 'Off',\n        on: 'On'\n      }\n    };\n\n    var opts = $.extend(defaults, options),\n      $kcToggle = $('<div class=\"kc-toggle\"/>').insertAfter(element).append(element);\n\n    $kcToggle.toggleClass('on', element.is(':checked'));\n\n    var kctOn = `<div class=\"kct-on\">${opts.labels.on}</div>`,\n        kctOff = `<div class=\"kct-off\">${opts.labels.off}</div>`,\n        kctHandle = `<div class=\"kct-handle\"></div>`,\n        kctInner = `<div class=\"kct-inner\">${kctOn}${kctHandle}${kctOff}</div>`;\n\n    $kcToggle.append(kctInner);\n\n    $kcToggle.click(function() {\n      element.attr('checked', !element.attr('checked'));\n      $(this).toggleClass('on');\n    });\n\n  };\n\n  $.fn.kcToggle = function(options) {\n    var toggle = this;\n    return toggle.each(function() {\n      var element = $(this);\n      if (element.data('kcToggle')) {\n        return;\n      }\n      var kcToggle = new Toggle(element, options);\n      element.data('kcToggle', kcToggle);\n    });\n  };\n\n})(jQuery);\n","// render the formBuilder XML into html\nvar FormRender = function(options, element) {\n  'use strict';\n\n  var formRender = this,\n    defaults = {\n      destroyTemplate: true, // @todo\n      container: false,\n      dataType: 'xml',\n      formData: false,\n      label: {\n        selectColor: 'Select Color',\n        noFormData: 'No form data.',\n        formRendered: 'Form Rendered'\n      },\n      render: true,\n      notify: {\n        error: function(message) {\n          return console.error(message);\n        },\n        success: function(message) {\n          return console.log(message);\n        },\n        warning: function(message) {\n          return console.warn(message);\n        }\n      }\n    },\n    _helpers = {};\n\n  var opts = $.extend(defaults, options);\n\n\n  _helpers.getElement = function() {\n    if (!element.id) {\n      element.id = _helpers.makeId(element);\n    }\n\n    if (!element.onchange) {\n      element.onchange = function() {\n        opts.notify.success(opts.messages.formUpdated);\n      };\n    }\n\n    return element;\n  };\n\n  _helpers.makeId = function(element = false) {\n    let epoch = new Date().getTime();\n\n    return `${element.tagName}-${epoch}`;\n  };\n\n  if (!opts.formData && element) {\n    element = _helpers.getElement();\n    opts.formData = element.value;\n  }\n\n  /**\n   * Generate markup wrapper where needed\n   *\n   * @param  {string} type\n   * @param  {object} attrs\n   * @param  {string} content we wrap this\n   * @return {string}\n   */\n  _helpers.markup = function(type, attrs = {}, content = '') {\n    attrs = _helpers.attrString(attrs);\n    content = Array.isArray(content) ? content.join('') : content;\n    let inlineElems = ['input'],\n      template = inlineElems.indexOf(type) === -1 ? `<${type} ${attrs}>${content}</${type}>` : `<${type} ${attrs}/>`;\n    return template;\n  };\n\n  /**\n   * Generate preview markup\n   * @param  {object} field\n   * @return {string}       preview markup for field\n   * @todo\n   */\n  _helpers.fieldRender = function(field) {\n    var fieldMarkup = '',\n      fieldLabel = '',\n      optionsMarkup = '';\n    var fieldAttrs = _helpers.parseAttrs(field.attributes),\n      fieldDesc = fieldAttrs.description || '',\n      fieldRequired = '',\n      fieldOptions = $('option', field);\n    fieldAttrs.id = fieldAttrs.name;\n\n    if (fieldAttrs.required) {\n      fieldAttrs.required = null;\n      fieldAttrs['aria-required'] = 'true';\n      fieldRequired = `<span class=\"required\">*</span>`;\n    }\n\n    if (fieldAttrs.type !== 'hidden') {\n      if (fieldDesc) {\n        fieldDesc = `<span class=\"tooltip-element\" tooltip=\"${fieldDesc}\">?</span>`;\n      }\n      fieldLabel = `<label for=\"${fieldAttrs.id}\">${fieldAttrs.label} ${fieldRequired} ${fieldDesc}</label>`;\n    }\n\n    var fieldLabelVal = fieldAttrs.label;\n\n    delete fieldAttrs.label;\n    delete fieldAttrs.description;\n\n    var fieldAttrsString = _helpers.attrString(fieldAttrs);\n\n    switch (fieldAttrs.type) {\n      case 'textarea':\n      case 'rich-text':\n        delete fieldAttrs.type;\n        delete fieldAttrs.value;\n        fieldMarkup = `${fieldLabel}<textarea ${fieldAttrsString}></textarea>`;\n        break;\n      case 'select':\n        fieldAttrs.type = fieldAttrs.type.replace('-group', '');\n\n        if (fieldOptions.length) {\n          fieldOptions.each(function(index, el) {\n            index = index;\n            let optionAttrs = _helpers.parseAttrs(el.attributes),\n              optionAttrsString = _helpers.attrString(optionAttrs),\n              optionText = el.innerHTML || el.innerContent || el.innerText || el.childNodes[0].nodeValue || el.value;\n            optionsMarkup += `<option ${optionAttrsString}>${optionText}</option>`;\n          });\n        }\n        fieldMarkup = `${fieldLabel}<select ${fieldAttrsString}>${optionsMarkup}</select>`;\n        break;\n      case 'checkbox-group':\n      case 'radio-group':\n        fieldAttrs.type = fieldAttrs.type.replace('-group', '');\n\n        delete fieldAttrs.className;\n\n        if (fieldOptions.length) {\n          let optionName = fieldAttrs.type === 'checkbox' ? fieldAttrs.name + '[]' : fieldAttrs.name;\n          fieldOptions.each(function(index, el) {\n            let optionAttrs = $.extend({}, fieldAttrs, _helpers.parseAttrs(el.attributes)),\n              optionAttrsString,\n              optionText;\n\n            if (optionAttrs.selected) {\n              delete optionAttrs.selected;\n              optionAttrs.checked = null;\n            }\n\n            optionAttrs.name = optionName;\n            optionAttrs.id = fieldAttrs.id + '-' + index;\n            optionAttrsString = _helpers.attrString(optionAttrs);\n            optionText = el.innerHTML || el.innerContent || el.innerText || el.value || '';\n\n            optionsMarkup += `<input ${optionAttrsString} /> <label for=\"${optionAttrs.id}\">${optionText}</label><br>`;\n          });\n        }\n        fieldMarkup = `${fieldLabel}<div class=\"${fieldAttrs.type}-group\">${optionsMarkup}</div>`;\n        break;\n      case 'text':\n      case 'password':\n      case 'email':\n      case 'file':\n      case 'hidden':\n      case 'date':\n      case 'autocomplete':\n        fieldMarkup = `${fieldLabel} <input ${fieldAttrsString}>`;\n        break;\n      case 'color':\n        fieldMarkup = `${fieldLabel} <input ${fieldAttrsString}> ${opts.label.selectColor}`;\n        break;\n      case 'button':\n      case 'submit':\n        fieldMarkup = `<button ${fieldAttrsString}>${fieldLabelVal}</button>`;\n        break;\n      case 'checkbox':\n        fieldMarkup = `<input ${fieldAttrsString}> ${fieldLabel}`;\n\n        if (fieldAttrs.toggle) {\n          setTimeout(function() {\n            $(document.getElementById(fieldAttrs.id)).kcToggle();\n          }, 100);\n        }\n        break;\n      default:\n        fieldMarkup = `<${fieldAttrs.type}></${fieldAttrs.type}>`;\n    }\n\n    if (fieldAttrs.type !== 'hidden') {\n      fieldMarkup = _helpers.markup('div', {\n        className: 'form-group field-' + fieldAttrs.id\n      }, fieldMarkup);\n    }\n\n    return fieldMarkup;\n  };\n\n  _helpers.attrString = function(attrs) {\n    let attributes = [];\n\n    for (var attr in attrs) {\n      if (attrs.hasOwnProperty(attr)) {\n        attr = _helpers.safeAttr(attr, attrs[attr]);\n        attributes.push(attr.name + attr.value);\n      }\n    }\n    return attributes.join(' ');\n  };\n\n  _helpers.safeAttr = function(name, value) {\n    let safeAttr = {\n      className: 'class'\n    };\n\n    name = safeAttr[name] || name;\n    value = value ? window.JSON.stringify(value) : false;\n    value = value ? `=${value}` : '';\n\n    return {\n      name,\n      value\n    };\n  };\n\n  _helpers.parseAttrs = function(attrNodes) {\n    var fieldAttrs = {};\n    for (var attr in attrNodes) {\n      if (attrNodes.hasOwnProperty(attr)) {\n        fieldAttrs[attrNodes[attr].nodeName] = attrNodes[attr].nodeValue;\n      }\n    }\n    return fieldAttrs;\n  };\n\n  // Begin the core plugin\n  var rendered = [];\n\n  var formData = $.parseXML(opts.formData),\n    fields = $('field', formData);\n  // @todo - form configuration settings (control position, creatorId, theme etc)\n  // settings = $('settings', formData);\n\n  if (!formData) {\n    opts.notify.error(opts.label.noFormData);\n    return false;\n  } else {\n    opts.notify.success(opts.label.formRendered);\n  }\n\n  // generate field markup if we have fields\n  if (fields.length) {\n    fields.each(function(index, field) {\n      index = index;\n      rendered.push(_helpers.fieldRender(field));\n    });\n  }\n\n  var output = rendered.join('');\n\n  if (opts.render) {\n    if (opts.container && opts.container.length) {\n      opts.container.html(output);\n    } else if (element) {\n      element.replaceWith(output);\n    }\n  } else {\n    formRender.markup = output;\n  }\n\n  return formRender;\n\n};\n\n(function($) {\n  'use strict';\n\n  $.fn.formRender = function(options) {\n    this.each(function() {\n      let element = this,\n        formRender = new FormRender(options, element);\n      $(element).data('formRender', formRender);\n    });\n  };\n\n})(jQuery);\n"],"sourceRoot":"/source/"}