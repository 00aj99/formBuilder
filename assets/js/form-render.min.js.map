{"version":3,"sources":["form-render.min.js","kc-toggle.js","form-render.js"],"names":["$","Toggle","element","options","defaults","theme","labels","off","on","opts","extend","$kcToggle","insertAfter","append","toggleClass","is","kctOn","kctOff","kctHandle","kctInner","click","attr","this","fn","kcToggle","toggle","each","data","jQuery","formRender"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,AALA,cCAA,SAAUA,GAGR,GAAIC,GAAS,SAASC,EAASC,GAE7B,GAAIC,IACFC,MAAO,QACPC,QACEC,IAAK,MACLC,GAAI,OAIJC,EAAOT,EAAEU,OAAON,EAAUD,GAC5BQ,EAAYX,EAAE,4BAA4BY,YAAYV,GAASW,OAAOX,EAExES,GAAUG,YAAY,KAAMZ,EAAQa,GAAG,YAEvC,IAAIC,GAAK,uBAA0BP,EAAKH,OAAOE,GAAE,SAC7CS,EAAM,wBAA2BR,EAAKH,OAAOC,IAAG,SAChDW,EAAS,iCACTC,EAAQ,0BAA6BH,EAAQE,EAAYD,EAAM,QAEnEN,GAAUE,OAAOM,GAEjBR,EAAUS,MAAM,WACdlB,EAAQmB,KAAK,WAAYnB,EAAQmB,KAAK,YACtCrB,EAAEsB,MAAMR,YAAY,QAKxBd,GAAEuB,GAAGC,SAAW,SAASrB,GACvB,GAAIsB,GAASH,IACb,OAAOG,GAAOC,KAAK,WACjB,GAAIxB,GAAUF,EAAEsB,KAChB,KAAIpB,EAAQyB,KAAK,YAAjB,CAGA,GAAIH,GAAW,GAAIvB,GAAOC,EAASC,EACnCD,GAAQyB,KAAK,WAAYH,QAI5BI,QC3CH,SAAU5B,GAwPRA,EAAEuB,GAAGM,WAAa,SAAS1B,GACzBmB,KAAKI,KAAK,gBAKXE","file":"form-render.min.js","sourcesContent":["'use strict';\n\n(function ($) {\n  'use strict';\n\n  var Toggle = function Toggle(element, options) {\n\n    var defaults = {\n      theme: 'fresh',\n      labels: {\n        off: 'Off',\n        on: 'On'\n      }\n    };\n\n    var opts = $.extend(defaults, options),\n        $kcToggle = $('<div class=\"kc-toggle\"/>').insertAfter(element).append(element);\n\n    $kcToggle.toggleClass('on', element.is(':checked'));\n\n    var kctOn = '<div class=\"kct-on\">' + opts.labels.on + '</div>',\n        kctOff = '<div class=\"kct-off\">' + opts.labels.off + '</div>',\n        kctHandle = '<div class=\"kct-handle\"></div>',\n        kctInner = '<div class=\"kct-inner\">' + kctOn + kctHandle + kctOff + '</div>';\n\n    $kcToggle.append(kctInner);\n\n    $kcToggle.click(function () {\n      element.attr('checked', !element.attr('checked'));\n      $(this).toggleClass('on');\n    });\n  };\n\n  $.fn.kcToggle = function (options) {\n    var toggle = this;\n    return toggle.each(function () {\n      var element = $(this);\n      if (element.data('kcToggle')) {\n        return;\n      }\n      var kcToggle = new Toggle(element, options);\n      element.data('kcToggle', kcToggle);\n    });\n  };\n})(jQuery);\n// render the formBuilder XML into html\n'use strict';\n\n(function ($) {\n  'use strict';\n  var FormRender = function FormRender(options) {\n    var $template = $(this),\n        defaults = {\n      destroyTemplate: true, // @todo\n      container: false,\n      dataType: 'xml',\n      formData: false,\n      label: {\n        selectColor: 'Select Color',\n        noFormData: 'No form data.',\n        formRendered: 'Form Rendered'\n      },\n      render: true,\n      notify: {\n        error: function error(message) {\n          return console.error(message);\n        },\n        success: function success(message) {\n          return console.log(message);\n        },\n        warning: function warning(message) {\n          return console.warn(message);\n        }\n      }\n    },\n        _helpers = {};\n\n    var opts = $.extend(defaults, options);\n\n    /**\n     * Generate markup wrapper where needed\n     * @param  {string} type\n     * @param  {object} attrs\n     * @param  {string} content we wrap this\n     * @return {string}\n     */\n    _helpers.markup = function (type) {\n      var attrs = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n      var content = arguments.length <= 2 || arguments[2] === undefined ? '' : arguments[2];\n\n      attrs = _helpers.attrString(attrs);\n      content = Array.isArray(content) ? content.join('') : content;\n      var inlineElems = ['input'],\n          template = inlineElems.indexOf(type) === -1 ? '<' + type + ' ' + attrs + '>' + content + '</' + type + '>' : '<' + type + ' ' + attrs + '/>';\n      return template;\n    };\n\n    /**\n     * Generate preview markup\n     * @param  {object} field\n     * @return {string}       preview markup for field\n     * @todo\n     */\n    _helpers.fieldRender = function (field) {\n      var fieldMarkup = '',\n          fieldLabel = '',\n          optionsMarkup = '';\n      var fieldAttrs = _helpers.parseAttrs(field.attributes),\n          fieldDesc = fieldAttrs.description || '',\n          fieldRequired = '',\n          fieldOptions = $('option', field);\n      fieldAttrs.id = fieldAttrs.name;\n\n      if (fieldAttrs.required) {\n        fieldAttrs.required = null;\n        fieldAttrs['aria-required'] = 'true';\n        fieldRequired = '<span class=\"required\">*</span>';\n      }\n\n      if (fieldAttrs.type !== 'hidden') {\n        if (fieldDesc) {\n          fieldDesc = '<span class=\"tooltip-element\" tooltip=\"' + fieldDesc + '\">?</span>';\n        }\n        fieldLabel = '<label for=\"' + fieldAttrs.id + '\">' + fieldAttrs.label + ' ' + fieldRequired + ' ' + fieldDesc + '</label>';\n      }\n\n      var fieldLabelVal = fieldAttrs.label;\n\n      delete fieldAttrs.label;\n      delete fieldAttrs.description;\n\n      var fieldAttrsString = _helpers.attrString(fieldAttrs);\n\n      switch (fieldAttrs.type) {\n        case 'textarea':\n        case 'rich-text':\n          delete fieldAttrs.type;\n          delete fieldAttrs.value;\n          fieldMarkup = fieldLabel + '<textarea ' + fieldAttrsString + '></textarea>';\n          break;\n        case 'select':\n          fieldAttrs.type = fieldAttrs.type.replace('-group', '');\n\n          if (fieldOptions.length) {\n            fieldOptions.each(function (index, el) {\n              index = index;\n              var optionAttrs = _helpers.parseAttrs(el.attributes),\n                  optionAttrsString = _helpers.attrString(optionAttrs),\n                  optionText = el.innerHTML || el.innerContent || el.innerText || el.childNodes[0].nodeValue || el.value;\n              optionsMarkup += '<option ' + optionAttrsString + '>' + optionText + '</option>';\n            });\n          }\n          fieldMarkup = fieldLabel + '<select ' + fieldAttrsString + '>' + optionsMarkup + '</select>';\n          break;\n        case 'checkbox-group':\n        case 'radio-group':\n          fieldAttrs.type = fieldAttrs.type.replace('-group', '');\n\n          delete fieldAttrs.className;\n\n          if (fieldOptions.length) {\n            (function () {\n              var optionName = fieldAttrs.type === 'checkbox' ? fieldAttrs.name + '[]' : fieldAttrs.name;\n              fieldOptions.each(function (index, el) {\n                var optionAttrs = $.extend({}, fieldAttrs, _helpers.parseAttrs(el.attributes)),\n                    optionAttrsString = undefined,\n                    optionText = undefined;\n\n                if (optionAttrs.selected) {\n                  delete optionAttrs.selected;\n                  optionAttrs.checked = null;\n                }\n\n                optionAttrs.name = optionName;\n                optionAttrs.id = fieldAttrs.id + '-' + index;\n                optionAttrsString = _helpers.attrString(optionAttrs);\n                optionText = el.innerHTML || el.innerContent || el.innerText || el.value || '';\n\n                optionsMarkup += '<input ' + optionAttrsString + ' /> <label for=\"' + optionAttrs.id + '\">' + optionText + '</label><br>';\n              });\n            })();\n          }\n          fieldMarkup = fieldLabel + '<div class=\"' + fieldAttrs.type + '-group\">' + optionsMarkup + '</div>';\n          break;\n        case 'text':\n        case 'password':\n        case 'email':\n        case 'file':\n        case 'hidden':\n        case 'date':\n        case 'autocomplete':\n          fieldMarkup = fieldLabel + ' <input ' + fieldAttrsString + '>';\n          break;\n        case 'color':\n          fieldMarkup = fieldLabel + ' <input ' + fieldAttrsString + '> ' + opts.label.selectColor;\n          break;\n        case 'button':\n        case 'submit':\n          fieldMarkup = '<button ' + fieldAttrsString + '>' + fieldLabelVal + '</button>';\n          break;\n        case 'checkbox':\n          fieldMarkup = '<input ' + fieldAttrsString + '> ' + fieldLabel;\n\n          if (fieldAttrs.toggle) {\n            setTimeout(function () {\n              $(document.getElementById(fieldAttrs.id)).kcToggle();\n            }, 100);\n          }\n          break;\n        default:\n          fieldMarkup = '<' + fieldAttrs.type + '></' + fieldAttrs.type + '>';\n      }\n\n      if (fieldAttrs.type !== 'hidden') {\n        fieldMarkup = _helpers.markup('div', {\n          className: 'form-group field-' + fieldAttrs.id\n        }, fieldMarkup);\n      }\n\n      return fieldMarkup;\n    };\n\n    _helpers.attrString = function (attrs) {\n      var attributes = [];\n\n      for (var attr in attrs) {\n        if (attrs.hasOwnProperty(attr)) {\n          attr = _helpers.safeAttr(attr, attrs[attr]);\n          attributes.push(attr.name + attr.value);\n        }\n      }\n      return attributes.join(' ');\n    };\n\n    _helpers.safeAttr = function (name, value) {\n      var safeAttr = {\n        className: 'class'\n      };\n\n      name = safeAttr[name] || name;\n      value = value ? window.JSON.stringify(value) : false;\n      value = value ? '=' + value : '';\n\n      return {\n        name: name,\n        value: value\n      };\n    };\n\n    _helpers.parseAttrs = function (attrNodes) {\n      var fieldAttrs = {};\n      for (var attr in attrNodes) {\n        if (attrNodes.hasOwnProperty(attr)) {\n          fieldAttrs[attrNodes[attr].nodeName] = attrNodes[attr].nodeValue;\n        }\n      }\n      return fieldAttrs;\n    };\n\n    // Begin the core plugin\n    var render = (function () {\n      var rendered = [];\n\n      var formData = $.parseXML($template.val()),\n          fields = $('field', formData);\n      // @todo - form configuration settings (control position, creatorId, theme etc)\n      // settings = $('settings', formData);\n\n      if (!formData) {\n        opts.notify.error(opts.label.noFormData);\n        return false;\n      } else {\n        opts.notify.success(opts.label.formRendered);\n      }\n\n      // generate field markup if we have fields\n      if (fields.length) {\n        fields.each(function (index, field) {\n          index = index;\n          rendered.push(_helpers.fieldRender(field));\n        });\n      }\n\n      // sets the markup as data to be used by other modules\n      $template.data('formHtml', rendered);\n\n      var output = rendered.join('');\n\n      if (opts.render) {\n        if (opts.container && opts.container.length) {\n          opts.container.html(output);\n        } else {\n          $template.replaceWith(output);\n        }\n      }\n    })();\n  };\n\n  $.fn.formRender = function (options) {\n    this.each(function () {});\n  };\n})(jQuery);","(function($) {\n  'use strict';\n\n  var Toggle = function(element, options) {\n\n    var defaults = {\n      theme: 'fresh',\n      labels: {\n        off: 'Off',\n        on: 'On'\n      }\n    };\n\n    var opts = $.extend(defaults, options),\n      $kcToggle = $('<div class=\"kc-toggle\"/>').insertAfter(element).append(element);\n\n    $kcToggle.toggleClass('on', element.is(':checked'));\n\n    var kctOn = `<div class=\"kct-on\">${opts.labels.on}</div>`,\n        kctOff = `<div class=\"kct-off\">${opts.labels.off}</div>`,\n        kctHandle = `<div class=\"kct-handle\"></div>`,\n        kctInner = `<div class=\"kct-inner\">${kctOn}${kctHandle}${kctOff}</div>`;\n\n    $kcToggle.append(kctInner);\n\n    $kcToggle.click(function() {\n      element.attr('checked', !element.attr('checked'));\n      $(this).toggleClass('on');\n    });\n\n  };\n\n  $.fn.kcToggle = function(options) {\n    var toggle = this;\n    return toggle.each(function() {\n      var element = $(this);\n      if (element.data('kcToggle')) {\n        return;\n      }\n      var kcToggle = new Toggle(element, options);\n      element.data('kcToggle', kcToggle);\n    });\n  };\n\n})(jQuery);\n","// render the formBuilder XML into html\n(function($) {\n  'use strict';\n  var FormRender = function(options) {\n    var $template = $(this),\n      defaults = {\n        destroyTemplate: true, // @todo\n        container: false,\n        dataType: 'xml',\n        formData: false,\n        label: {\n          selectColor: 'Select Color',\n          noFormData: 'No form data.',\n          formRendered: 'Form Rendered'\n        },\n        render: true,\n        notify: {\n          error: function(message) {\n            return console.error(message);\n          },\n          success: function(message) {\n            return console.log(message);\n          },\n          warning: function(message) {\n            return console.warn(message);\n          }\n        }\n      },\n      _helpers = {};\n\n    var opts = $.extend(defaults, options);\n\n    /**\n     * Generate markup wrapper where needed\n     * @param  {string} type\n     * @param  {object} attrs\n     * @param  {string} content we wrap this\n     * @return {string}\n     */\n    _helpers.markup = function(type, attrs = {}, content = '') {\n      attrs = _helpers.attrString(attrs);\n      content = Array.isArray(content) ? content.join('') : content;\n      let inlineElems = ['input'],\n        template = inlineElems.indexOf(type) === -1 ? `<${type} ${attrs}>${content}</${type}>` : `<${type} ${attrs}/>`;\n      return template;\n    };\n\n    /**\n     * Generate preview markup\n     * @param  {object} field\n     * @return {string}       preview markup for field\n     * @todo\n     */\n    _helpers.fieldRender = function(field) {\n      var fieldMarkup = '',\n        fieldLabel = '',\n        optionsMarkup = '';\n      var fieldAttrs = _helpers.parseAttrs(field.attributes),\n        fieldDesc = fieldAttrs.description || '',\n        fieldRequired = '',\n        fieldOptions = $('option', field);\n      fieldAttrs.id = fieldAttrs.name;\n\n      if (fieldAttrs.required) {\n        fieldAttrs.required = null;\n        fieldAttrs['aria-required'] = 'true';\n        fieldRequired = `<span class=\"required\">*</span>`;\n      }\n\n      if (fieldAttrs.type !== 'hidden') {\n        if (fieldDesc) {\n          fieldDesc = `<span class=\"tooltip-element\" tooltip=\"${fieldDesc}\">?</span>`;\n        }\n        fieldLabel = `<label for=\"${fieldAttrs.id}\">${fieldAttrs.label} ${fieldRequired} ${fieldDesc}</label>`;\n      }\n\n      var fieldLabelVal = fieldAttrs.label;\n\n      delete fieldAttrs.label;\n      delete fieldAttrs.description;\n\n      var fieldAttrsString = _helpers.attrString(fieldAttrs);\n\n      switch (fieldAttrs.type) {\n        case 'textarea':\n        case 'rich-text':\n          delete fieldAttrs.type;\n          delete fieldAttrs.value;\n          fieldMarkup = `${fieldLabel}<textarea ${fieldAttrsString}></textarea>`;\n          break;\n        case 'select':\n          fieldAttrs.type = fieldAttrs.type.replace('-group', '');\n\n          if (fieldOptions.length) {\n            fieldOptions.each(function(index, el) {\n              index = index;\n              let optionAttrs = _helpers.parseAttrs(el.attributes),\n                optionAttrsString = _helpers.attrString(optionAttrs),\n                optionText = el.innerHTML || el.innerContent || el.innerText || el.childNodes[0].nodeValue || el.value;\n              optionsMarkup += `<option ${optionAttrsString}>${optionText}</option>`;\n            });\n          }\n          fieldMarkup = `${fieldLabel}<select ${fieldAttrsString}>${optionsMarkup}</select>`;\n          break;\n        case 'checkbox-group':\n        case 'radio-group':\n          fieldAttrs.type = fieldAttrs.type.replace('-group', '');\n\n          delete fieldAttrs.className;\n\n          if (fieldOptions.length) {\n            let optionName = fieldAttrs.type === 'checkbox' ? fieldAttrs.name + '[]' : fieldAttrs.name;\n            fieldOptions.each(function(index, el) {\n              let optionAttrs = $.extend({}, fieldAttrs, _helpers.parseAttrs(el.attributes)),\n                optionAttrsString,\n                optionText;\n\n              if (optionAttrs.selected) {\n                delete optionAttrs.selected;\n                optionAttrs.checked = null;\n              }\n\n              optionAttrs.name = optionName;\n              optionAttrs.id = fieldAttrs.id + '-' + index;\n              optionAttrsString = _helpers.attrString(optionAttrs);\n              optionText = el.innerHTML || el.innerContent || el.innerText || el.value || '';\n\n              optionsMarkup += `<input ${optionAttrsString} /> <label for=\"${optionAttrs.id}\">${optionText}</label><br>`;\n            });\n          }\n          fieldMarkup = `${fieldLabel}<div class=\"${fieldAttrs.type}-group\">${optionsMarkup}</div>`;\n          break;\n        case 'text':\n        case 'password':\n        case 'email':\n        case 'file':\n        case 'hidden':\n        case 'date':\n        case 'autocomplete':\n          fieldMarkup = `${fieldLabel} <input ${fieldAttrsString}>`;\n          break;\n        case 'color':\n          fieldMarkup = `${fieldLabel} <input ${fieldAttrsString}> ${opts.label.selectColor}`;\n          break;\n        case 'button':\n        case 'submit':\n          fieldMarkup = `<button ${fieldAttrsString}>${fieldLabelVal}</button>`;\n          break;\n        case 'checkbox':\n          fieldMarkup = `<input ${fieldAttrsString}> ${fieldLabel}`;\n\n          if (fieldAttrs.toggle) {\n            setTimeout(function() {\n              $(document.getElementById(fieldAttrs.id)).kcToggle();\n            }, 100);\n          }\n          break;\n        default:\n          fieldMarkup = `<${fieldAttrs.type}></${fieldAttrs.type}>`;\n      }\n\n      if (fieldAttrs.type !== 'hidden') {\n        fieldMarkup = _helpers.markup('div', {\n          className: 'form-group field-' + fieldAttrs.id\n        }, fieldMarkup);\n      }\n\n      return fieldMarkup;\n    };\n\n    _helpers.attrString = function(attrs) {\n      let attributes = [];\n\n      for (var attr in attrs) {\n        if (attrs.hasOwnProperty(attr)) {\n          attr = _helpers.safeAttr(attr, attrs[attr]);\n          attributes.push(attr.name + attr.value);\n        }\n      }\n      return attributes.join(' ');\n    };\n\n    _helpers.safeAttr = function(name, value) {\n      let safeAttr = {\n        className: 'class'\n      };\n\n      name = safeAttr[name] || name;\n      value = value ? window.JSON.stringify(value) : false;\n      value = value ? `=${value}` : '';\n\n      return {\n        name,\n        value\n      };\n    };\n\n    _helpers.parseAttrs = function(attrNodes) {\n      var fieldAttrs = {};\n      for (var attr in attrNodes) {\n        if (attrNodes.hasOwnProperty(attr)) {\n          fieldAttrs[attrNodes[attr].nodeName] = attrNodes[attr].nodeValue;\n        }\n      }\n      return fieldAttrs;\n    };\n\n    // Begin the core plugin\n    var render = (function() {\n      var rendered = [];\n\n      var formData = $.parseXML($template.val()),\n        fields = $('field', formData);\n      // @todo - form configuration settings (control position, creatorId, theme etc)\n      // settings = $('settings', formData);\n\n      if (!formData) {\n        opts.notify.error(opts.label.noFormData);\n        return false;\n      } else {\n        opts.notify.success(opts.label.formRendered);\n      }\n\n      // generate field markup if we have fields\n      if (fields.length) {\n        fields.each(function(index, field) {\n          index = index;\n          rendered.push(_helpers.fieldRender(field));\n        });\n      }\n\n      // sets the markup as data to be used by other modules\n      $template.data('formHtml', rendered);\n\n      var output = rendered.join('');\n\n      if (opts.render) {\n        if (opts.container && opts.container.length) {\n          opts.container.html(output);\n        } else {\n          $template.replaceWith(output);\n        }\n      }\n\n    })();\n\n\n  };\n\n  $.fn.formRender = function(options) {\n    this.each(function() {\n\n    });\n  };\n\n})(jQuery);\n"],"sourceRoot":"/source/"}