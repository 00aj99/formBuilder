{"version":3,"sources":["form-render.min.js","kc-toggle.js","form-render.js"],"names":["$","Toggle","element","options","defaults","theme","labels","off","on","opts","extend","$kcToggle","insertAfter","append","toggleClass","is","kctOn","kctOff","kctHandle","kctInner","click","attr","this","fn","kcToggle","toggle","each","data","jQuery","FormRender","formRender","destroyTemplate","container","dataType","formData","label","selectColor","noFormData","formRendered","render","notify","error","message","console","success","log","warning","warn","_helpers","getElement","id","makeId","document","getElementById","epoch","Date","getTime","tagName","value","markup","type","attrs","arguments","length","undefined","content","attrString","Array","isArray","join","inlineElems","template","indexOf","fieldRender","field","fieldMarkup","fieldLabel","optionsMarkup","fieldAttrs","parseAttrs","attributes","fieldDesc","description","fieldRequired","fieldOptions","name","required","fieldLabelText","fieldLabelVal","fieldAttrsString","replace","index","el","optionAttrs","optionAttrsString","textContent","className","optionName","Object","assign","selected","checked","setTimeout","hasOwnProperty","safeAttr","push","window","JSON","stringify","attrNodes","rendered","parseXML","fields","output","html","replaceWith"],"mappings":"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","file":"form-render.min.js","sourcesContent":["'use strict';\n\n(function ($) {\n  'use strict';\n\n  var Toggle = function Toggle(element, options) {\n\n    var defaults = {\n      theme: 'fresh',\n      labels: {\n        off: 'Off',\n        on: 'On'\n      }\n    };\n\n    var opts = $.extend(defaults, options),\n        $kcToggle = $('<div class=\"kc-toggle\"/>').insertAfter(element).append(element);\n\n    $kcToggle.toggleClass('on', element.is(':checked'));\n\n    var kctOn = '<div class=\"kct-on\">' + opts.labels.on + '</div>',\n        kctOff = '<div class=\"kct-off\">' + opts.labels.off + '</div>',\n        kctHandle = '<div class=\"kct-handle\"></div>',\n        kctInner = '<div class=\"kct-inner\">' + kctOn + kctHandle + kctOff + '</div>';\n\n    $kcToggle.append(kctInner);\n\n    $kcToggle.click(function () {\n      element.attr('checked', !element.attr('checked'));\n      $(this).toggleClass('on');\n    });\n  };\n\n  $.fn.kcToggle = function (options) {\n    var toggle = this;\n    return toggle.each(function () {\n      var element = $(this);\n      if (element.data('kcToggle')) {\n        return;\n      }\n      var kcToggle = new Toggle(element, options);\n      element.data('kcToggle', kcToggle);\n    });\n  };\n})(jQuery);\n'use strict';\n\n// render the formBuilder XML into html\nvar FormRender = function FormRender(options, element) {\n  'use strict';\n\n  var formRender = this,\n      defaults = {\n    destroyTemplate: true, // @todo\n    container: false,\n    dataType: 'xml',\n    formData: false,\n    label: {\n      selectColor: 'Select Color',\n      noFormData: 'No form data.',\n      formRendered: 'Form Rendered'\n    },\n    render: true,\n    notify: {\n      error: function error(message) {\n        return console.error(message);\n      },\n      success: function success(message) {\n        return console.log(message);\n      },\n      warning: function warning(message) {\n        return console.warn(message);\n      }\n    }\n  },\n      _helpers = {};\n\n  var opts = $.extend(defaults, options);\n\n  /**\r\n   * Require the html element if it has been lost\r\n   *\r\n   * @return {object} javascript object for html element\r\n   */\n  _helpers.getElement = function () {\n    if (!element.id) {\n      element.id = _helpers.makeId(element);\n    }\n\n    return document.getElementById(element.id);\n  };\n\n  /**\r\n   * Make an ID for this element using current date and tag\r\n   *\r\n   * @param  {Boolean} element\r\n   * @return {String}          new id for element\r\n   */\n  _helpers.makeId = function (element) {\n    var epoch = new Date().getTime();\n\n    return element.tagName + '-' + epoch;\n  };\n\n  if (!opts.formData && element) {\n    element = _helpers.getElement();\n    opts.formData = element.value;\n  }\n\n  /**\r\n   * Generate markup wrapper where needed\r\n   *\r\n   * @param  {string} type\r\n   * @param  {object} attrs\r\n   * @param  {string} content we wrap this\r\n   * @return {string}\r\n   */\n  _helpers.markup = function (type) {\n    var attrs = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n    var content = arguments.length <= 2 || arguments[2] === undefined ? '' : arguments[2];\n\n    attrs = _helpers.attrString(attrs);\n    content = Array.isArray(content) ? content.join('') : content;\n    var inlineElems = ['input'],\n        template = inlineElems.indexOf(type) === -1 ? '<' + type + ' ' + attrs + '>' + content + '</' + type + '>' : '<' + type + ' ' + attrs + '/>';\n    return template;\n  };\n\n  /**\r\n   * Generate preview markup\r\n   * @param  {object} field\r\n   * @return {string}       preview markup for field\r\n   * @todo\r\n   */\n  _helpers.fieldRender = function (field) {\n    var fieldMarkup = '',\n        fieldLabel = '',\n        optionsMarkup = '';\n    var fieldAttrs = _helpers.parseAttrs(field.attributes),\n        fieldDesc = fieldAttrs.description || '',\n        fieldRequired = '',\n        fieldOptions = $('option', field);\n    fieldAttrs.id = fieldAttrs.name;\n\n    if (fieldAttrs.required) {\n      fieldAttrs.required = null;\n      fieldAttrs['aria-required'] = 'true';\n      fieldRequired = '<span class=\"required\">*</span>';\n    }\n\n    if (fieldAttrs.type !== 'hidden') {\n      if (fieldDesc) {\n        fieldDesc = '<span class=\"tooltip-element\" tooltip=\"' + fieldDesc + '\">?</span>';\n      }\n      var fieldLabelText = fieldAttrs.label || '';\n      fieldLabel = '<label for=\"' + fieldAttrs.id + '\">' + fieldLabelText + ' ' + fieldRequired + ' ' + fieldDesc + '</label>';\n    }\n\n    var fieldLabelVal = fieldAttrs.label;\n\n    delete fieldAttrs.label;\n    delete fieldAttrs.description;\n\n    var fieldAttrsString = _helpers.attrString(fieldAttrs);\n\n    switch (fieldAttrs.type) {\n      case 'textarea':\n      case 'rich-text':\n        delete fieldAttrs.type;\n        delete fieldAttrs.value;\n        fieldMarkup = fieldLabel + '<textarea ' + fieldAttrsString + '></textarea>';\n        break;\n      case 'select':\n        fieldAttrs.type = fieldAttrs.type.replace('-group', '');\n\n        if (fieldOptions.length) {\n          fieldOptions.each(function (index, el) {\n            index = index;\n            var optionAttrs = _helpers.parseAttrs(el.attributes),\n                optionAttrsString = _helpers.attrString(optionAttrs);\n            optionsMarkup += '<option ' + optionAttrsString + '>' + el.textContent + '</option>';\n          });\n        }\n        fieldMarkup = fieldLabel + '<select ' + fieldAttrsString + '>' + optionsMarkup + '</select>';\n        break;\n      case 'checkbox-group':\n      case 'radio-group':\n        fieldAttrs.type = fieldAttrs.type.replace('-group', '');\n\n        delete fieldAttrs.className;\n\n        if (fieldOptions.length) {\n          (function () {\n            var optionName = fieldAttrs.type === 'checkbox' ? fieldAttrs.name + '[]' : fieldAttrs.name;\n            fieldOptions.each(function (index, el) {\n              var optionAttrs = Object.assign({}, fieldAttrs, _helpers.parseAttrs(el.attributes)),\n                  optionAttrsString = void 0;\n\n              if (optionAttrs.selected) {\n                delete optionAttrs.selected;\n                optionAttrs.checked = null;\n              }\n\n              optionAttrs.name = optionName;\n              optionAttrs.id = fieldAttrs.id + '-' + index;\n              optionAttrsString = _helpers.attrString(optionAttrs);\n              optionsMarkup += '<input ' + optionAttrsString + ' /> <label for=\"' + optionAttrs.id + '\">' + el.textContent + '</label><br>';\n            });\n          })();\n        }\n        fieldMarkup = fieldLabel + '<div class=\"' + fieldAttrs.type + '-group\">' + optionsMarkup + '</div>';\n        break;\n      case 'text':\n      case 'password':\n      case 'email':\n      case 'file':\n      case 'hidden':\n      case 'date':\n      case 'autocomplete':\n        fieldMarkup = fieldLabel + ' <input ' + fieldAttrsString + '>';\n        break;\n      case 'color':\n        fieldMarkup = fieldLabel + ' <input ' + fieldAttrsString + '> ' + opts.label.selectColor;\n        break;\n      case 'button':\n      case 'submit':\n        fieldMarkup = '<button ' + fieldAttrsString + '>' + fieldLabelVal + '</button>';\n        break;\n      case 'checkbox':\n        fieldMarkup = '<input ' + fieldAttrsString + '> ' + fieldLabel;\n\n        if (fieldAttrs.toggle) {\n          setTimeout(function () {\n            $(document.getElementById(fieldAttrs.id)).kcToggle();\n          }, 100);\n        }\n        break;\n      default:\n        fieldMarkup = '<' + fieldAttrs.type + '></' + fieldAttrs.type + '>';\n    }\n\n    if (fieldAttrs.type !== 'hidden') {\n      fieldMarkup = _helpers.markup('div', {\n        className: 'form-group field-' + fieldAttrs.id\n      }, fieldMarkup);\n    }\n\n    return fieldMarkup;\n  };\n\n  _helpers.attrString = function (attrs) {\n    var attributes = [];\n\n    for (var attr in attrs) {\n      if (attrs.hasOwnProperty(attr)) {\n        attr = _helpers.safeAttr(attr, attrs[attr]);\n        attributes.push(attr.name + attr.value);\n      }\n    }\n    return attributes.join(' ');\n  };\n\n  _helpers.safeAttr = function (name, value) {\n    var safeAttr = {\n      className: 'class'\n    };\n\n    name = safeAttr[name] || name;\n    value = value ? window.JSON.stringify(value) : false;\n    value = value ? '=' + value : '';\n\n    return {\n      name: name,\n      value: value\n    };\n  };\n\n  _helpers.parseAttrs = function (attrNodes) {\n    var fieldAttrs = {};\n    for (var attr in attrNodes) {\n      if (attrNodes.hasOwnProperty(attr)) {\n        fieldAttrs[attrNodes[attr].name] = attrNodes[attr].value;\n      }\n    }\n    return fieldAttrs;\n  };\n\n  // Begin the core plugin\n  var rendered = [];\n\n  var formData = $.parseXML(opts.formData),\n      fields = $('field', formData);\n  // @todo - form configuration settings (control position, creatorId, theme etc)\n  // settings = $('settings', formData);\n\n  if (!formData) {\n    opts.notify.error(opts.label.noFormData);\n    return false;\n  } else {\n    opts.notify.success(opts.label.formRendered);\n  }\n\n  // generate field markup if we have fields\n  if (fields.length) {\n    fields.each(function (index, field) {\n      index = index;\n      rendered.push(_helpers.fieldRender(field));\n    });\n  }\n\n  var output = rendered.join('');\n\n  if (opts.render) {\n    if (opts.container && opts.container.length) {\n      opts.container.html(output);\n    } else if (element) {\n      element.replaceWith(output);\n    }\n  } else {\n    formRender.markup = output;\n  }\n\n  return formRender;\n};\n\n(function ($) {\n  'use strict';\n\n  $.fn.formRender = function (options) {\n    this.each(function () {\n      var formRender = new FormRender(options, this);\n      return formRender;\n    });\n  };\n})(jQuery);","(function($) {\r\n  'use strict';\r\n\r\n  var Toggle = function(element, options) {\r\n\r\n    var defaults = {\r\n      theme: 'fresh',\r\n      labels: {\r\n        off: 'Off',\r\n        on: 'On'\r\n      }\r\n    };\r\n\r\n    var opts = $.extend(defaults, options),\r\n      $kcToggle = $('<div class=\"kc-toggle\"/>').insertAfter(element).append(element);\r\n\r\n    $kcToggle.toggleClass('on', element.is(':checked'));\r\n\r\n    var kctOn = `<div class=\"kct-on\">${opts.labels.on}</div>`,\r\n        kctOff = `<div class=\"kct-off\">${opts.labels.off}</div>`,\r\n        kctHandle = `<div class=\"kct-handle\"></div>`,\r\n        kctInner = `<div class=\"kct-inner\">${kctOn}${kctHandle}${kctOff}</div>`;\r\n\r\n    $kcToggle.append(kctInner);\r\n\r\n    $kcToggle.click(function() {\r\n      element.attr('checked', !element.attr('checked'));\r\n      $(this).toggleClass('on');\r\n    });\r\n\r\n  };\r\n\r\n  $.fn.kcToggle = function(options) {\r\n    var toggle = this;\r\n    return toggle.each(function() {\r\n      var element = $(this);\r\n      if (element.data('kcToggle')) {\r\n        return;\r\n      }\r\n      var kcToggle = new Toggle(element, options);\r\n      element.data('kcToggle', kcToggle);\r\n    });\r\n  };\r\n\r\n})(jQuery);\r\n","// render the formBuilder XML into html\r\nvar FormRender = function(options, element) {\r\n  'use strict';\r\n\r\n  var formRender = this,\r\n    defaults = {\r\n      destroyTemplate: true, // @todo\r\n      container: false,\r\n      dataType: 'xml',\r\n      formData: false,\r\n      label: {\r\n        selectColor: 'Select Color',\r\n        noFormData: 'No form data.',\r\n        formRendered: 'Form Rendered'\r\n      },\r\n      render: true,\r\n      notify: {\r\n        error: function(message) {\r\n          return console.error(message);\r\n        },\r\n        success: function(message) {\r\n          return console.log(message);\r\n        },\r\n        warning: function(message) {\r\n          return console.warn(message);\r\n        }\r\n      }\r\n    },\r\n    _helpers = {};\r\n\r\n  var opts = $.extend(defaults, options);\r\n\r\n\r\n  /**\r\n   * Require the html element if it has been lost\r\n   *\r\n   * @return {object} javascript object for html element\r\n   */\r\n  _helpers.getElement = function() {\r\n    if (!element.id) {\r\n      element.id = _helpers.makeId(element);\r\n    }\r\n\r\n    return document.getElementById(element.id);\r\n  };\r\n\r\n  /**\r\n   * Make an ID for this element using current date and tag\r\n   *\r\n   * @param  {Boolean} element\r\n   * @return {String}          new id for element\r\n   */\r\n  _helpers.makeId = function(element) {\r\n    let epoch = new Date().getTime();\r\n\r\n    return `${element.tagName}-${epoch}`;\r\n  };\r\n\r\n  if (!opts.formData && element) {\r\n    element = _helpers.getElement();\r\n    opts.formData = element.value;\r\n  }\r\n\r\n  /**\r\n   * Generate markup wrapper where needed\r\n   *\r\n   * @param  {string} type\r\n   * @param  {object} attrs\r\n   * @param  {string} content we wrap this\r\n   * @return {string}\r\n   */\r\n  _helpers.markup = function(type, attrs = {}, content = '') {\r\n    attrs = _helpers.attrString(attrs);\r\n    content = Array.isArray(content) ? content.join('') : content;\r\n    let inlineElems = ['input'],\r\n      template = inlineElems.indexOf(type) === -1 ? `<${type} ${attrs}>${content}</${type}>` : `<${type} ${attrs}/>`;\r\n    return template;\r\n  };\r\n\r\n  /**\r\n   * Generate preview markup\r\n   * @param  {object} field\r\n   * @return {string}       preview markup for field\r\n   * @todo\r\n   */\r\n  _helpers.fieldRender = function(field) {\r\n    var fieldMarkup = '',\r\n      fieldLabel = '',\r\n      optionsMarkup = '';\r\n    var fieldAttrs = _helpers.parseAttrs(field.attributes),\r\n      fieldDesc = fieldAttrs.description || '',\r\n      fieldRequired = '',\r\n      fieldOptions = $('option', field);\r\n    fieldAttrs.id = fieldAttrs.name;\r\n\r\n    if (fieldAttrs.required) {\r\n      fieldAttrs.required = null;\r\n      fieldAttrs['aria-required'] = 'true';\r\n      fieldRequired = `<span class=\"required\">*</span>`;\r\n    }\r\n\r\n    if (fieldAttrs.type !== 'hidden') {\r\n      if (fieldDesc) {\r\n        fieldDesc = `<span class=\"tooltip-element\" tooltip=\"${fieldDesc}\">?</span>`;\r\n      }\r\n      let fieldLabelText = fieldAttrs.label || '';\r\n      fieldLabel = `<label for=\"${fieldAttrs.id}\">${fieldLabelText} ${fieldRequired} ${fieldDesc}</label>`;\r\n    }\r\n\r\n    var fieldLabelVal = fieldAttrs.label;\r\n\r\n    delete fieldAttrs.label;\r\n    delete fieldAttrs.description;\r\n\r\n    var fieldAttrsString = _helpers.attrString(fieldAttrs);\r\n\r\n    switch (fieldAttrs.type) {\r\n      case 'textarea':\r\n      case 'rich-text':\r\n        delete fieldAttrs.type;\r\n        delete fieldAttrs.value;\r\n        fieldMarkup = `${fieldLabel}<textarea ${fieldAttrsString}></textarea>`;\r\n        break;\r\n      case 'select':\r\n        fieldAttrs.type = fieldAttrs.type.replace('-group', '');\r\n\r\n        if (fieldOptions.length) {\r\n          fieldOptions.each(function(index, el) {\r\n            index = index;\r\n            let optionAttrs = _helpers.parseAttrs(el.attributes),\r\n              optionAttrsString = _helpers.attrString(optionAttrs);\r\n            optionsMarkup += `<option ${optionAttrsString}>${el.textContent}</option>`;\r\n          });\r\n        }\r\n        fieldMarkup = `${fieldLabel}<select ${fieldAttrsString}>${optionsMarkup}</select>`;\r\n        break;\r\n      case 'checkbox-group':\r\n      case 'radio-group':\r\n        fieldAttrs.type = fieldAttrs.type.replace('-group', '');\r\n\r\n        delete fieldAttrs.className;\r\n\r\n        if (fieldOptions.length) {\r\n          let optionName = fieldAttrs.type === 'checkbox' ? fieldAttrs.name + '[]' : fieldAttrs.name;\r\n          fieldOptions.each(function(index, el) {\r\n            let optionAttrs = Object.assign({}, fieldAttrs, _helpers.parseAttrs(el.attributes)),\r\n              optionAttrsString;\r\n\r\n            if (optionAttrs.selected) {\r\n              delete optionAttrs.selected;\r\n              optionAttrs.checked = null;\r\n            }\r\n\r\n            optionAttrs.name = optionName;\r\n            optionAttrs.id = fieldAttrs.id + '-' + index;\r\n            optionAttrsString = _helpers.attrString(optionAttrs);\r\n            optionsMarkup += `<input ${optionAttrsString} /> <label for=\"${optionAttrs.id}\">${el.textContent}</label><br>`;\r\n          });\r\n        }\r\n        fieldMarkup = `${fieldLabel}<div class=\"${fieldAttrs.type}-group\">${optionsMarkup}</div>`;\r\n        break;\r\n      case 'text':\r\n      case 'password':\r\n      case 'email':\r\n      case 'file':\r\n      case 'hidden':\r\n      case 'date':\r\n      case 'autocomplete':\r\n        fieldMarkup = `${fieldLabel} <input ${fieldAttrsString}>`;\r\n        break;\r\n      case 'color':\r\n        fieldMarkup = `${fieldLabel} <input ${fieldAttrsString}> ${opts.label.selectColor}`;\r\n        break;\r\n      case 'button':\r\n      case 'submit':\r\n        fieldMarkup = `<button ${fieldAttrsString}>${fieldLabelVal}</button>`;\r\n        break;\r\n      case 'checkbox':\r\n        fieldMarkup = `<input ${fieldAttrsString}> ${fieldLabel}`;\r\n\r\n        if (fieldAttrs.toggle) {\r\n          setTimeout(function() {\r\n            $(document.getElementById(fieldAttrs.id)).kcToggle();\r\n          }, 100);\r\n        }\r\n        break;\r\n      default:\r\n        fieldMarkup = `<${fieldAttrs.type}></${fieldAttrs.type}>`;\r\n    }\r\n\r\n    if (fieldAttrs.type !== 'hidden') {\r\n      fieldMarkup = _helpers.markup('div', {\r\n        className: 'form-group field-' + fieldAttrs.id\r\n      }, fieldMarkup);\r\n    }\r\n\r\n    return fieldMarkup;\r\n  };\r\n\r\n  _helpers.attrString = function(attrs) {\r\n    let attributes = [];\r\n\r\n    for (var attr in attrs) {\r\n      if (attrs.hasOwnProperty(attr)) {\r\n        attr = _helpers.safeAttr(attr, attrs[attr]);\r\n        attributes.push(attr.name + attr.value);\r\n      }\r\n    }\r\n    return attributes.join(' ');\r\n  };\r\n\r\n  _helpers.safeAttr = function(name, value) {\r\n    let safeAttr = {\r\n      className: 'class'\r\n    };\r\n\r\n    name = safeAttr[name] || name;\r\n    value = value ? window.JSON.stringify(value) : false;\r\n    value = value ? `=${value}` : '';\r\n\r\n    return {\r\n      name,\r\n      value\r\n    };\r\n  };\r\n\r\n  _helpers.parseAttrs = function(attrNodes) {\r\n    var fieldAttrs = {};\r\n    for (var attr in attrNodes) {\r\n      if (attrNodes.hasOwnProperty(attr)) {\r\n        fieldAttrs[attrNodes[attr].name] = attrNodes[attr].value;\r\n      }\r\n    }\r\n    return fieldAttrs;\r\n  };\r\n\r\n  // Begin the core plugin\r\n  var rendered = [];\r\n\r\n  var formData = $.parseXML(opts.formData),\r\n    fields = $('field', formData);\r\n  // @todo - form configuration settings (control position, creatorId, theme etc)\r\n  // settings = $('settings', formData);\r\n\r\n  if (!formData) {\r\n    opts.notify.error(opts.label.noFormData);\r\n    return false;\r\n  } else {\r\n    opts.notify.success(opts.label.formRendered);\r\n  }\r\n\r\n  // generate field markup if we have fields\r\n  if (fields.length) {\r\n    fields.each(function(index, field) {\r\n      index = index;\r\n      rendered.push(_helpers.fieldRender(field));\r\n    });\r\n  }\r\n\r\n  var output = rendered.join('');\r\n\r\n  if (opts.render) {\r\n    if (opts.container && opts.container.length) {\r\n      opts.container.html(output);\r\n    } else if (element) {\r\n      element.replaceWith(output);\r\n    }\r\n  } else {\r\n    formRender.markup = output;\r\n  }\r\n\r\n  return formRender;\r\n\r\n};\r\n\r\n(function($) {\r\n  'use strict';\r\n\r\n  $.fn.formRender = function(options) {\r\n    this.each(function() {\r\n      let formRender = new FormRender(options, this);\r\n      return formRender;\r\n    });\r\n  };\r\n\r\n})(jQuery);\r\n"],"sourceRoot":"/source/"}